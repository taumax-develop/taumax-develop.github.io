---
import SiteLayout from '../../../../../../layouts/SiteLayout.astro';
import { Image } from 'astro:assets';
import refactoring from '../../../img/refactoring.jpg';
import legacy_code from '../../../img/legacy_code.jpg';
const title = 'Switch Statements';
const description = 'Code Smell: Switch Statements';
const twitterCardSize = 'summary_large_image';
const indexList = [
  { text: 'Home', href: '/' }
];
---
<SiteLayout {title} {description} {twitterCardSize} {indexList}>
  <h1 id="switchstatements">Switch Statements</h1>
  <p><a href="https://sourcemaking.com/refactoring/smells/switch-statements">Switch Statements</a></p>
  <p><strong><em>兆候と症状</em></strong><br/>
    複雑なswitch文またはif文の連続がこのCode Smellの兆候です。</p>
  <p><strong><em>問題の理由</em></strong><br/>
    switch/case演算子の比較的まれな使用は、オブジェクト指向コードの特徴の1つです。多くの場合、同じようなswitch文はプログラム内のさまざまな場所に散在します。新しい条件が追加されたら、すべてのスイッチコードを見つけて変更する必要があります。
    経験則として、switch文が使われている場所ではポリモルフィズムを検討する必要があります。</p>
  <p><strong><em>対処</em></strong></p>
  <ul>
    <li>switch文を分離して適切なクラスに配置するには、「<a href="https://qiita.com/taumax/items/f192b16676f78fa04849#extract-method">Extract Method</a>」と「<a href="https://qiita.com/taumax/items/f192b16676f78fa04849#move-method">Move Method</a>」が必要になる場合があります。</li>
    <li>プログラムのランタイムモードが切り替えられるときなどにように、switch文がtype codeに基づいている場合は、「<a href="https://qiita.com/taumax/items/f192b16676f78fa04849#replace-type-code-with-subclasses">Replace Type Code with Subclasses</a>」か、「<a href="https://qiita.com/taumax/items/f192b16676f78fa04849#replace-type-code-with-statestrategy">Replace Type Code with State/Strategy</a>」を使用します。</li>
    <li>継承構造を指定した後、「<a href="https://qiita.com/taumax/items/f192b16676f78fa04849#replace-conditional-with-polymorphism">Replace Conditional with Polymorphism</a>」を使います。</li>
    <li>演算子にあまり多くの条件がなく、それらがすべて異なるパラメーターで同じメソッドを呼び出す場合、ポリモルフィズムはでは問題を解決できません。この場合、「<a href="https://qiita.com/taumax/items/f192b16676f78fa04849#replace-parameter-with-explicit-methods">Replace Parameter with Explicit Methods</a>」の手法でそのメソッドを複数の小さなメソッドに分割し、それに応じてswitch文を変更できます。</li>
    <li>条件オプションの1つがnullの場合、「<a href="https://qiita.com/taumax/items/f192b16676f78fa04849#introduce-null-object">Introduce Null Object</a>」を使います。</li>
  </ul>
  <p><strong><em>効果</em></strong></p>
  <ul>
    <li>ソースコードの構成を改善することができます。</li>
  </ul>
  <p><strong><em>When to Ignore</em></strong><br/>
    以下のような場合はswitch文をリファクタリングする必要はありません。</p>
  <ul>
    <li>switch文がシンプルなものである場合。</li>
    <li>GoFのデザインパターンである <a href="https://sourcemaking.com/design_patterns/factory_method">Factory Method</a> や <a href="https://sourcemaking.com/design_patterns/abstract_factory">Abstract Factory</a> パターンを実装する場合。</li>
  </ul>
  <br/><br/>
  <p>書籍としてはこの辺りが参考になると思います。<br/><br/>
    リファクタリング第2版<br/>
    <a target="_blank" href="https://amzn.to/4m4SktG" rel="noopener noreferrer"><Image src={refactoring} alt="refactoring" /></a><br/><br/>
    レガシーコード改善ガイド<br/>
    <a target="_blank" href="https://amzn.to/44SixVn" rel="noopener noreferrer"><Image src={legacy_code} alt="legacy_code" /></a>
  </p>
</SiteLayout>
