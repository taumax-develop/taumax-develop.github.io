---
import SiteLayout from '../../../../../../layouts/SiteLayout.astro';
import { Image } from 'astro:assets';
import RefactoringImg from "../../../img/refactoring.jpg";
import LegacyCodeImg from "../../../img/legacy_code.jpg";

const title = "Shotgun Surgery";
const description = "Code Smell: Shotgun Surgery";
const twitterCardSize = "summary_large_image";
const indexList = [
  { text: "Home", href: "/" }
];
---

<SiteLayout title={title} description={description} twitterCardSize={twitterCardSize} indexList={indexList}>
  <h3 id="shotgunsurgery">Shotgun Surgery</h3>
  <p><a href="https://sourcemaking.com/refactoring/smells/shotgun-surgery">Shotgun Surgery（ショットガンサージェリー）</a></p>
  <p>Shotgun Surgeryは、1つの変更が複数のクラスやメソッドにまたがって行われることを指ります。たとえば、ある機能を追加するために複数のクラスのコードを修正しなければならない場合です。</p>
  <p><strong><em>兆候と症状</em></strong>
    1つの変更を加えるために、複数のクラスやメソッドを修正する必要がある。</p>
  <p><strong><em>問題の理由</em></strong>
    このような状況は、機能が適切に分割されていなかったり、責任の分担が不明確な場合に発生します。</p>
  <p><strong><em>対処</em></strong></p>
  <ul>
    <li><p>「<a href="https://qiita.com/taumax/items/f192b16676f78fa04849#move-method">Move Method</a>」や「<a href="https://qiita.com/taumax/items/f192b16676f78fa04849#move-field">Move Field</a>」を使って、関連する機能を1つのクラスにまとめます。</p></li>
    <li><p>「<a href="https://qiita.com/taumax/items/f192b16676f78fa04849#extract-class">Extract Class</a>」でクラスを分割し、責任を明確にします。</p></li>
  </ul>
  <p><strong><em>効果</em></strong></p>
  <ul>
    <li>修正箇所の局所化</li>
    <li>責任の明確化</li>
  </ul>
  <br/><br/>
  書籍としてはこの辺りが参考になると思います。<br/>
  <br/>
  リファクタリング第2版<br/>
  <a target="_blank" href="https://amzn.to/4m4SktG" rel="noopener noreferrer"><Image src={RefactoringImg} alt="refactoring" /></a>
  <br/>
  レガシーコード改善ガイド<br/>
  <a target="_blank" href="https://amzn.to/44SixVn" rel="noopener noreferrer"><Image src={LegacyCodeImg} alt="legacy_code" /></a>
</SiteLayout>
