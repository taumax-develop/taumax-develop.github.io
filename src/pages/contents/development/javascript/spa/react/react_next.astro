---
import SiteLayout from '../../../../../../layouts/SiteLayout.astro';
import { Image } from "astro:assets";
import { TWITTER_CARD_SUMMARY } from '../../../../../../components/BaseHead.astro';
import next_project from './img/react_next/next_project.jpg';
import _app from './img/react_next/_app.jpg';
import コンポーネント構造 from './img/react_next/コンポーネント構造.jpg';
import 変身後モンスター算出リアクティブ from './img/react_next/変身後モンスター算出（リアクティブ）.jpg';
import 変身後モンスター算出 from './img/react_next/変身後モンスター算出.jpg';
import モンスター一覧 from './img/react_next/モンスター一覧.jpg';
import 能力詳細 from './img/react_next/能力詳細.jpg';

const reactCode = `
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <style>
    #counter {
      cursor: pointer;
      font-size: 20pt;
      background-color: lightblue;
      color: black;
      padding: 10px 1px 5px 1px;
    }
  </style>
  <div id="counter" onClick="doCount();">wait....</div>
  <script>
    let counter = 0;
    let dom = document.querySelector('#counter');
    doCount();

    function doCount() {
      counter++
      let element = React.createElement(
        'p', {}, "counter: " + counter
      )
      ReactDOM.render(element, dom)
    }
  </script>
`

const indexList = [
  { id: '#firstly', name: 'はじめに' },
  { id: '#react', name: 'React' },
  { id: '#jsx', name: 'JSX' },
  { id: '#component', name: 'コンポーネント' },
  { id: '#hooks', name: 'React Hooks' },
  { id: '#next', name: 'Next.js' },
  { id: '#rendering', name: 'レンダリング' },
  { id: '#filebase_routing', name: 'ファイルベースルーティング' },
  { id: '#what_i_made', name: '作った物' },
];

---

<SiteLayout
  title="Next.jsのレンダリング"
  description="Next.jsのレンダリングについて"
  twitterCardSize={TWITTER_CARD_SUMMARY}
  indexList={indexList}
>

  <h2 class="title">React/Next.js</h2>

  <ul class="breadcrumb">
    <li class="breadcrumbli"><a href="../../../../../index.html">ホーム</a></li>
    <li class="breadcrumbli"> > <a href="../../js_index.html">JavaScript</a></li>
    <li class="breadcrumbli"> > <a href="../spa.html">SPA</a></li>
    <li class="breadcrumbli"> > React/Next.js</li>
  </ul>

  <br/>
  <span id="firstly"></span>
  <h3 class="title">はじめに</h3>
  <p>
    このページは、<a href="../spa.html">SPA(Single Page Application)</a>の続きのページです。<br/>
    ここではReactとNext.jsにスポットを当てて記載していきます。<br/>
    一応このページから読み進めても問題ないように構成したつもりですが、先のページを見てからの方が、ReactとNext.jsについて理解が深まるかもしれません。<br/>
  </p>

  <br/>
  <span id="react"></span>
  <h3 class="title">React</h3>
  <p>
    Reactとは、WebサイトやWebアプリのUI部分を開発する際に活用するJavaScriptライブラリです。ReactはMeta (旧Facebook社)が開発し、2013年にオープンソース化されました。<br/>
    リアクティブ・プログラミングを特徴としています。リアクティブとは、『何かの値が変化するとそれに連動して表示内容が自動で変化する仕組み』のことです。<br/>
    ReactはJavaScript用のフレームワークと勘違いされることがありますが、実際には上述の通りライブラリとなります。CDN(Contents Delivery Network)経由でhtmlファイル内でReactのライブラリを使用することができます。<br/>
    以下は実際にReactのライブラリを使用して書いたものです。<br/>
    ↓クリックでcounter増加<br/>
  </p>

  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

  <!-- 文字列で記載したCDNのreactコードを設定 -->
  <div set:html={reactCode}></div>

  <br/><br/>
  <p>上記のソースコード（抜粋）</p>

<pre class="title"><code class="title">react_next.html</code></pre>
<pre><code>{`<head>
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
</head>

<style>
  #counter {
    cursor: pointer;
    font-size: 20pt;
    background-color: lightblue;
    color: black;
    padding: 10px 1px 5px 1px;
  }
</style>
<div id="counter" onClick="doCount();">wait....</div>
<script>
  let counter = 0;
  let dom = document.querySelector('#counter');
  doCount();

  function doCount() {
    counter++
    let element = React.createElement(
      'p', {}, "counter: " + counter
    )
    ReactDOM.render(element, dom)
  }
</script>
`}</code></pre>

  <br/><br/>
  上記はCDNを使用していますが、これは主に学習目的または小規模のアプリケーション目的での使用が適しています。<br/>
  大規模な開発をする場合、Reactで重要な概念として以下3つがあります。<br/>
  <ul>
    <li><a href="#jsx">JSX(JavaScript XML)</a></li>
    <li><a href="#component">コンポーネント</a></li>
    <li><a href="#hooks">React Hooks</a></li>
  </ul>

  <br/>
  <span id="jsx"></span>
  <h4 class="title">JSX(JavaScript XML)</h4>
  <p>
    JSXはJavaScriptの構文拡張で、JavaScriptファイル内にHTMLのようなコードを記述できるようにするものです。Meta（旧Facebook社）によって開発されました。たとえば、次のようなコードを書くことが出来ます。<br/>
    <code>const heading = &lt;h1&gt;Hello, JSX!&lt;/h1&gt;;</code><br/>
    このコードはHTMLのようにも見えますが、JavaScriptのコードです。headingという定数を作り、その定数にHTMLの要素（React要素）を代入しています。<br/>
    JSXを記述する場合、ファイルの拡張子は<code>.jsx</code>とします。これに<a href="../../typescript.html">TypeScript</a>を適用する場合、拡張子は<code>.tsx</code>とします。<br/>
    JSXでは中括弧 { } を使うことで、以下のようにReact要素内にJavaScriptの値を埋め込むことができます。<br/>
    <br/>
    <code>{`
      let name = 'React';<br/>
      const heading = <h1>Hello, {name}</h1>;
    `}</code><br/>
  </p>

  <br/>
  <span id="component"></span>
  <h4 class="title">コンポーネント</h4>
  <p>
    Reactでは、自分が書いたマークアップ、CSS、JavaScript を、アプリのための再利用可能な UI 要素にまとめることができます。これを『コンポーネント』と呼びます。<br/>
    以下コンポーネントの例です。 <code>CommonFooter</code> という名前のコンポーネントを作っています。<br/>
  </p>

<pre class="title"><code class="title">common_footer.tsx</code></pre>
<pre><code>{`export default function CommonFooter(labelKey: any): JSX.Element {
  return (
    <div>
    <footer>
      ...
    </footer>
    </div>
  );
}
`}</code></pre>

  <br/>
  <p>
    このようにして作成したコンポーネントを組み合わせてシステムを構築していくのがReactの考え方です。<br/>
  </p>

  <br/>
  <span id="hooks"></span>
  <h4 class="title">React Hooks</h4>
  <p>
    React Hooksはフック(Hook)によって関数コンポーネント内で状態やライフサイクルを扱うための機能です。<br/>
    公式が提供しているフックは10種類あり、さらにフックを組み合わせてカスタムフックを独自に実装できます。<br/>
  </p>

  <div class="slider" style="width: 100%">
    <table border="1">
      <tr><th style="z-index:0">フック種類</th><th>用途（概要）</th><th>フック名</th></tr>
      <tr><td rowspan="2">状態のフック<br/>(State Hooks)</td><td rowspan="2">内部状態を持ち、その状態の変化に応じて表示を変更できる。</td><td>useState</td></tr>
      <tr><td>useReducer</td></tr>
      <tr><td rowspan="2">メモ化のフック<br/>(Performance Hooks)</td><td rowspan="2">値や関数を保持し、必要のない子要素のレンダリングや計算を<br/>抑止するために使用し、パフォーマンスの最適化を図る</td><td>useCallback</td></tr>
      <tr><td>useMemo</td></tr>
      <tr><td rowspan="2">副作用のフック<br/>(Effect Hooks)</td><td rowspan="2">副作用（コンポーネントの描画とは直接関係ない処理のこと）<br/>のためのフック。副作用にはログの出力やデータの取得などが<br/>あります。</td><td>useEffect</td></tr>
      <tr><td>useLayoutEffect</td></tr>
      <tr><td>Contextのためのフック<br/>(Context Hooks)</td><td>親の変数を子コンポーネントで受け取る</td><td>useContext</td></tr>
      <tr><td rowspan="2">refのフック<br/>(Ref Hooks)</td><td rowspan="2">レンダリングに使用しない情報を記録</td><td>useRef</td></tr>
      <tr><td>useImperativeHandle</td></tr>
      <tr><td>Other Hooks</td><td>ライブラリ開発時に利用されるHooks</td><td>useDebugValue</td></tr>
    </table>
  </div>

  <br/>
  <p>
    ReactではこのReact Hooksを利用してリアクティブなシステムを構築していきます。<br/>
    例えば状態のフックであるuseStateなら以下のようなコーディングをすることでリアクティブにすることができます。<br/>
  </p>

<pre><code>const [状態, 更新関数] = useState(初期状態)</code></pre>
<br/>
<pre><code>{`const [count, setCount] = useState(0);
<div>
  <p>Count: {count}</p>
  <button onClick={() => setCount(count + 1)}>+</button>
</div>
`}</code></pre>

  <br/>
  <span id="next"></span>
  <h3 class="title">Next.js</h3>
  <p>
    ここではNext.jsの機能について記載していきます。
  </p>

  <br/>
  <span id="rendering"></span>
  <h4 class="title">レンダリング</h4>
  <p>
    Next.js では、以下のようなレンダリング手法が使えます。<br/>
    各レンダリング手法の詳細とその実装方法は<a href="./next_rendering.html">別ページに纏めているのでこのリンク先</a>をご参照ください。<br/>
  </p>

  <div class="slider">
  <table border="1">
    <tr><th style="z-index: 1">レンダリング手法</th><th>データ取得タイミング</th><th>使用する関数名</th><th>補足</th></tr>
    <tr><td>SSR(Server-Side Rendering)</td><td>ユーザーのリクエスト時<br/>（サーバーサイド）</td><td>getServerSideProps</td><td></td></tr>
    <tr><td>SSG(Static Site Generation)</td><td>ビルド時(SSG)</td><td>getStaticProps</td><td></td></tr>
    <tr><td>ISG(Incremental Static Generation)</td><td></td><td>getStaticPaths</td><td></td></tr>
    <tr><td>ISR(Incremental Static Regeneration)</td><td>ビルド時(ISR)</td><td>revalidateを返すgetStaticProps</td><td>ISRはデプロイ後もバックグラウンド<br/>ビルドが実行される。</td></tr>
    <tr><td>On Demand ISR<br/>(On Demand Incremental Static Regeneration)</td><td></td><td>revalidateを返すgetStaticPropsと<br/>unstable_revalidateの組み合わせ</td><td></td></tr>
    <tr><td>CSR(Client-Side Rendering)</td><td>ユーザーのリクエスト時<br/>（クライアントサイド）</td><td>-（デフォルトがCSRなので使用する関数は無し）</td><td></td></tr>
  </table>
  </div>
  <br/>

  <br/>
  <span id="filebase_routing"></span>
  <h4 class="title">ファイルベースルーティング</h4>
  <p>
    Next.jsの「ファイルベースルーティング」は、pagesディレクトリ内のファイル構成がそのままアプリケーションのページ構成になるという機能です。pages ディレクトリ配下にスクリプトファイルを配置すると、それを使って画面表示を行います。<br/>
    例えば以下の画像のように配置した場合、 <code>http://[ホスト名]/saga1/ability/ability_detail</code> というurlで <code>ability_detail.tsx</code> の内容が表示されます。<br/>

    <br/>
    <Image src={next_project} style="border: solid 1px #FFFFFF" alt="next_project" /><br/>

    <br/>
    Next.js では、すべてのページの初期化に App というコンポーネントを使用しています。<code>pages/_app.tsx</code> を作成することで、Appコンポーネントをカスタマイズできます。全ページに共通のcssを適応するなど、すべてのページで共通な処理などを書くことができます。<br/>
    <Image src={_app} style="border: solid 1px #FFFFFF" alt="_app" /><br/>

    <br/>
    以下のコードは<code>_app.tsx</code>の中身です。1行目で<code>import '../styles/style.css'</code>を記述することで、pages配下のすべてのページに <code>style.css</code> が適応されます。<br/>
  </p>

<pre class="title"><code class="title">_app.tsx</code></pre>
<pre><code>{`import '../styles/style.css'
function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}
export default MyApp
`}</code></pre>


  <br/>
  <span id="what_i_made"></span>
  <h3 class="title">作った物</h3>
  <p>
    ゲームのサガシリーズが好きなので、初代サガである魔界塔士サガに関するものを作ってみました。<br/>
    とりあえず作った後に勉強したので、今見ると作り直したくなる感じはあるが、一旦現時点（2024年5月）のものとして公開してみます。<br/>
    ソースコードを全量載せると結構な量になるので、だいぶ抜粋して紹介します。<br/>

    <br/>
    各ページのレイアウトを統一するために、共通部分を CommonBody, CommonHeader, CommonFooter に分けてそれぞれコンポーネント化し、ページ毎に異なる部分を別途作成してそれを埋め込む形で作成しています。<br/>
    <Image src={コンポーネント構造} width="500" alt="コンポーネント構造" /><br/>

    <br/><br/>
    以下はWebサイトに表示するページのフッター部分を <code>CommonFooter</code> という名前でコンポーネント化したものです。<br/>
  </p>


<pre class="title"><code class="title">common_footer.tsx</code></pre>
<pre><code>{`export default function CommonFooter(labelKey: any): JSX.Element {
  return (
    <div>
      <footer>
        共通フッターの内容をここに書く
      </footer>
    </div>
  );
}
`}</code></pre>

  <br/>
  <p>
    コンポーネント化したフッターを呼び出す際は <code>&lt;CommonFooter /&gt;</code> と記述します。<br/>
    以下は同じくコンポーネント化した CommonBody から CommonFooter を呼び出しているサンプルです。<br/>
    また、 CommonBody の呼び出し元から引数で渡された内容をbody部に設定しています（<code>{`{body.message}`}</code>の部分）。<br/>
  </p>

<pre class="title"><code class="title">common_body.tsx</code></pre>
<pre><code>{`import CommonFooter from "./common_footer";

export default function CommonBody(body: any): JSX.Element {
  <body>
    <section className="box">
      {body.message}  // 引数(body)から渡された値(message)を設定
      ...
    </section>
    <CommonFooter />  // CommonFooter コンポーネント呼び出し
  </body>
}
`}</code></pre>


  <br/><br/>
  <p>
    共通のコンポーネントはこんな感じで、あとは各ページ個別の内容を pages ディレクトリ配下に配置し、作成したコンポーネントをその中で呼び出して使うようにしていました。<br/>
    今回は pages 直下に monster_trans_mechanism.tsx というファイル名で配置しているので、サーバ起動後、 http://ホスト名:3000/monster_trans_mechanism でアクセスできます。<br/>
    以下が monster_trans_mechanism.tsx の中身です。<code>{`<CommonBody message={this.CreateBody()} />`}</code>の部分で CommonBody コンポーネントを呼び出し、 message という名前の変数に CreateBody() 関数の戻り値を設定しています。<br/>
  </p>

<pre class="title"><code class="title">pages/monster_trans_mechanism.tsx</code></pre>
<pre><code>{`import CommonBody from '../common/common_body';

export default class MonsterTransform extends Component {
  constructor(props: {} | Readonly<{}>) {
    super(props)
  }

  render() {
    return (<>
      // CommonBodyコンポーネント呼び出し。
      // CreateBody()の戻り値を引数(messageという名前の変数)で渡している。
      <CommonBody message={this.CreateBody()} />
    </>)
  }

  // body部の生成
  CreateBody() {
    let body =
    <>
      各ページの内容をここに書く
    </>
    return body
  }
}
`}</code></pre>


  <br/><br/>
  <p>
    基本的に上記のような構成で全てのページを作成しています。<br/>
    実際に作った物は大まかに以下。<br/>
  </p>
  <ul>
    <li>仲間モンスター一覧</li>
    <li>変身後モンスター算出</li>
    <li>能力一覧</li>
  </ul>

  <br/>
  <p>
    魔界塔士サガはモンスターを仲間にすることができ、そのモンスターは敵が落とす肉を食べることでより強力なモンスターに変身し、成長するというシステムになっています。何に変身するかは（普通は）分からないようになっています。<br/>
    仲間になるモンスターを一覧化したものが<a href="https://sagamax.cyou/games/saga1/monster/monster_detail_index" target="_blank" rel="noopener noreferrer">仲間モンスター一覧</a>で、変身後に何のモンスターになるかを算出してくれるのが<a href="https://sagamax.cyou/games/saga1/monster/monster_transform" target="_blank" rel="noopener noreferrer">変身後モンスター算出ツール</a>です。<br/>
    ※変身後モンスター算出ツールの初期表示が遅いが、おそらく適切なレンダリング手法になっていないからだと思われる。今後改善予定。<br/>

    <br/>
    <a href="https://sagamax.cyou/games/saga1/monster/monster_transform" target="_blank" rel="noopener noreferrer">変身後モンスター算出ツール</a>は、画面上段のプルダウンを選択すると、それに合わせて画面下の変身後の部分がリアクティブに切り替わるようになっています。<br/>
    下段の変身後の部分だけがレンダリングされるようになっています。<br/>
    <Image src={変身後モンスター算出リアクティブ} width="500" alt="変身後モンスター算出（リアクティブ）" /><br/>

    <br/>
    <a href="https://sagamax.cyou/games/saga1/monster/monster_detail_index" target="_blank" rel="noopener noreferrer">仲間モンスター一覧</a>の方は、テーブルのヘッダー部分を操作することで表示対象を絞ったり、並び替えができるようになっており、その度に一覧の部分だけが再レンダリングされるようになっています。<br/>
    また、一覧のモンスター名がリンクになっていて、そこから当該モンスターの詳細情報を確認できる画面に遷移できるようになっています。<br/>
    このモンスターの詳細情報は、変身後モンスター算出画面でも同じ内容が出力されるようになっています。ソースコードに同じ内容を2回書きたくないので、各モンスターの詳細情報部分をbody部として切り出し、それを詳細画面と変身後モンスター算出の詳細欄の両方で流用する形にしている。<br/>

    <br/>
    変身後モンスター算出の詳細欄<br/>
    <Image src={変身後モンスター算出} width="500" alt="変身後モンスター算出" /><br/>

    <br/>
    モンスター一覧の詳細欄。パンくずリスト以外は同じ内容になっていることがわかる。<br/>
    <Image src={モンスター一覧} width="500" alt="モンスター一覧" /><br/>

    <br/><br/>
    あと作ったのは、モンスターが使用する能力の詳細。<br/>
    画面のレイアウトをReactで記載し、表示する情報自体はDBに格納。<br/>
    URLからIDを取得してそれをもとにDBから情報を取得して画面をレンダリングするようになっています。<br/>
    <Image src={能力詳細} width="500" alt="能力詳細" /><br/>

    <br/>
    リンクは↓こちら。URL の ability_id を変えることで内容が変わることが確認できると思います。<br/>
    <a href="https://sagamax.cyou/games/saga1/ability/ability_detail?ability_id=0001" target="_blank" rel="noopener noreferrer">能力詳細</a><br/>
  </p>

  <br/>
  React/Next.jsを使って作ってみたものの紹介は以上です。<br/>

  <br/>
  <hr>

  <br/>
  参考書籍<br/>
  <ul>
    <li><a href="https://amzn.to/4cx3seQ" target="_blank" rel="noopener noreferrer"><img src="../img/react_next.jpg" width="200"/><br/>React.js&Next.js超入門 第2版</a></li>
    <li><a href="https://amzn.to/4as09nr" target="_blank" rel="noopener noreferrer"><img src="../img/typescript_react_next.jpg" width="200"/><br/>TypeScriptとReact/Next.jsでつくる実践Webアプリケーション開発</a></li>
  </ul>

  <br/>
  参考サイト<br/>
  <ul>
    <li><a href="https://kinsta.com/jp/knowledgebase/what-is-jsx/" target="_blank" rel="noopener noreferrer">kinsta Reactで使用するJSXの基本をわかりやすく解説</a></li>
    <li><a href="https://qiita.com/kamenaris/items/8bcb407007501326bd9d" target="_blank" rel="noopener noreferrer">Qiita Next.jsの_documment..tsxと_app.tsxについてメモ</a></li>
    <li><a href="https://weseek.co.jp/tech/703/" target="_blank" rel="noopener noreferrer">WESEEK Tech Blog 煩わしい設定は一切なし!Next.jsでCSS を使う方法</a></li>
    <li><a href="https://tyotto-good.com/nextjs/document-app" target="_blank" rel="noopener noreferrer">Tyotto good! Next.jsの_documment.js(tsx)と_app.js(tsx)について爆速で理解しよう</a></li>
    <li><a href="https://qiita.com/tetsutaroendo/items/c7171286137d963cdecf" target="_blank" rel="noopener noreferrer">Qiita Next.jsの_app.jsと_document.js</a></li>
    <li><a href="https://dev-k.hatenablog.com/entry/how-to-use-react-in-cdn-dev-k" target="_blank" rel="noopener noreferrer">deve.K's Programming Primer - プログラミング初心者のための入門ブログ</a></li>
    <li><a href="https://zenn.dev/kaitok/articles/7a81c497252189" target="_blank" rel="noopener noreferrer">Zenn React Hooks 再入門</a></li>
    <li><a href="https://weseek.co.jp/tech/703/" target="_blank" rel="noopener noreferrer">WESEEK Tech Blog 煩わしい設定は一切なし!Next.jsでCSS を使う方法</a></li>
    <li><a href="https://dev.classmethod.jp/articles/next-js-12-1/" target="_blank" rel="noopener noreferrer">DevelopersIO Next.js 12.1の新機能オンデマンド ISRでページを手動再検証させてみた</a></li>
    <li><a href="https://zenn.dev/shimabukuromeg/articles/955cea236650d4" target="_blank" rel="noopener noreferrer">Zenn On-demand ISRの機能を試してみた</a></li>
    <li><a href="https://kk-web.link/blog/20220412" target="_blank" rel="noopener noreferrer">kk-web Next.jsのOn-demand Revalidationの簡単な説明</a></li>
    <li><a href="https://scrapbox.io/teamlab-frontend/SSR,_CSR,_SSG,_ISG,_ISR%E3%81%AE%E9%81%95%E3%81%84%E3%81%A8%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91%E6%96%B9%E3%80%82%E3%81%9D%E3%82%8C%E3%81%9E%E3%82%8CNext.js%E3%81%A7Todo%E3%82%A2%E3%83%97%E3%83%AA%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%80%82" target="_blank" rel="noopener noreferrer">teamlab-frontend SSR, CSR, SSG, ISG, ISRの違いと使い分け方。それぞれNext.jsでTodoアプリ作ってみた。</a></li>
    <li><a href="https://note.com/meg_t/n/n286d6b52073e" target="_blank" rel="noopener noreferrer">note Next.jsのIncremental Static Regenerationが凄い</a></li>
    <li><a href="https://zenn.dev/k_kazukiiiiii/articles/dc14b9249d0255" target="_blank" rel="noopener noreferrer">Zenn Next.js + TypeScript | CSR・SSR・SG・ISG・ISR・On Demand ISR の違いをコード付きで解説</a></li>
  </ul>
</SiteLayout>
