---
import SiteLayout from '../../../../../layouts/SiteLayout.astro';
import { Image } from "astro:assets";
import { TWITTER_CARD_SUMMARY } from '../../../../../components/BaseHead.astro';
import aaa from './img/従来のWebアプリケーション.jpg';
import bbb from './img/SPAの動作イメージ.jpg';
import ccc from './img/利用率ランキング_2024.jpg';
import ddd from './img/react_next.jpg';
import eee from './img/typescript_react_next.jpg';
import fff from './img/vue3.jpg';
import ggg from './img/nuxt3.jpg';
import hhh from './img/vuejs入門.jpg';

const indexList = [
  { id: '#firstly', name: 'はじめに' },
  { id: '#spa', name: 'SPA' },
  { id: '#fw', name: 'フレームワーク' },
  { id: '#rendering', name: 'Next, Nuxtのレンダリング' },
  { id: '#detail', name: 'React, Vue詳細' },
  { id: '#thoughts', name: '感想' }
];
---

<SiteLayout
  title="SPA"
  description="SPA(Single Page Application)について"
  twitterCardSize={TWITTER_CARD_SUMMARY}
  indexList={indexList}
>

  <h2 class="title">SPA(Single Page Application)</h2>

  <ul class="breadcrumb">
    <li class="breadcrumbli"><a href="../../../../index">ホーム</a></li>
    <li class="breadcrumbli"> > <a href="../js_index">JavaScript</a></li>
    <li class="breadcrumbli"> > SPA</li>
  </ul>

  <br/>
  <span id="firstly"></span>
  <h3 class="title">はじめに</h3>
  <p>
    このページは、<a href="../js_index">JavaScriptの進化</a>の続きのページです。<br/>
    ここではSPA(Single Page Application)にスポットを当てて記載していきます。<br/>
    一応このページから読み進めても問題ないように構成したつもりですが、先のページを見てからの方が、SPAが生まれるまでの背景がわかって面白いかもしれません。<br/>
  </p>

  <br/>
  <span id="spa"></span>
  <h3 class="title">SPA(Single Page Application)</h3>
  <p>
    SPA(Single Page Application)は従来のWebアプリケーションとは異なる手法でWebページのレンダリング（HTMLやCSS、JavaScriptなどで書かれたコードをWebページとして閲覧できる形に変換すること）を行います。<br/>
    下図は従来のレンダリング手法。サーバーサイドでレンダリングしてhtmlを生成し、クライアントに返却するという手法です。<br/>
    htmlを受け取ったクライアントはそのたびにヘッダやフッダを含めて全て更新する方式をとっていました。<br/>
    <Image src={aaa} width={600} alt='従来のWebアプリケーション' /><br/>

    <br/>
    一方、下図がSPAのレンダリングです。SPAでは、最初にHTMLやCSS、JavaScriptを受け取った後は必要なデータだけをサーバに要求し差分を表示する方式で構築されます。<br/>
    下図のように、ページをHTTPで最初にロードしたら、あとは手元のデータを処理するだけでインターフェースが構成されます。必要なデータはサーバーから非同期的にJSONデータとして受け取ることで、通信量を最小限に抑えることも可能です。<br/>
    <Image src={bbb} width={600} alt='SPAの動作イメージ' /><br/>
  </p>

  <br/>
  <span id="fw"></span>
  <h3 class="title">SPAをサポートするフレームワーク</h3>
  <p>
    この新しい形式のWebアプリケーションであるSPAをサポートするフレームワークとして、React, Vue.js, Angular, Svelteなどがあります。<br/>
  </p>

  <table border="1">
    <tr><th style="white-space: nowrap;">フレームワーク</th><th>特徴</th></tr>
    <tr>
      <td>React<br/>（リアクト）</td>
      <td>
        Meta社（旧Facebook社）主導のフレームワーク（厳密にはフレームワークではなくライブラリ）。UIデザインの知識がなくても最先端のフロントエンドが作れるスマホアプリにも拡張できる。<br/>
        仮想DOM(※)を介してDOMを更新。
      </td>
    </tr>
    <tr>
      <td>Vue.js<br/>（ヴュー・ジェイエス）</td>
      <td>
        シンプルなフレームワークで使いやすく、学習コストが低い。<br/>
        大規模開発には向かない（と書いているサイトをよく見かける）。<br/>
        仮想DOMを介してDOMを更新。
      </td>
    </tr>
    <tr>
      <td>Angular<br/>（アンギュラー）</td>
      <td>
        Google主導のフレームワーク。動作端末を考慮する必要がなく、汎用性が高い機能が多いため大規模開発に向いている。<br/>
        仮想DOMに似たincremental-domを使用。
      </td>
    </tr>
    <tr>
      <td>Svelte<br/>（スヴェルト）</td>
      <td>
        実行時のファイルサイズが小さいため、高いパフォーマンスが出る。コードの記述量が少ない、コンパイル時に値が変化する可能性を把握しているため、仮想DOMを使用せず効率的に直接DOMを更新することができる。
      </td>
    </tr>
  </table>

  <p>
    ※仮想DOM：DOMの軽量版みたいなもの。ユーザーのアクションに応じて仮想DOMを更新し、差分だけを実際のDOMに適用する。<br/>

    <br/>
    2024年の State of JavaScript では React が圧倒的に利用率が高く、その後に Vue.js, Angular, Svelte等が続いている状況でした。<br/>
    フロントエンドフレームワークの利用順位(2024)<br/>
    <Image src={ccc} width={500} style="border: solid 1px #FFFFFF" alt='フロントエンドフレームワークの利用順位(2024)' /><br/>
    ※画像は<a href="https://2024.stateofjs.com/ja-JP/libraries/front-end-frameworks/" target="_blank" rel="noopener noreferrer">こちら</a>から抜粋<br/>
  </p>

  <br/>
  ここから先はReactとVue.js、さらに、Reactをベースに開発されたフレームワークのNext.jsと、Vue.jsをベースに開発されたフレームワークのNuxtに注目していきます。<br/>

  <br/>
  <span id="rendering"></span>
  <h3 class="title">NextとNuxtのレンダリング手法</h3>
  <p>
    React, VueはUI構築に特化したJavaScriptフレームワークですが、それにサーバー側の機能を持たせたのがNext.js, Nuxtです。Next.js, Nuxtを使うことで単体でWebアプリケーションを構築することができるようになります。また、レンダリングの手法も、クライアントだけでなくサーバーサイドでのレンダリングや、それらを組み合わせることもできるようになります。<br/>

    <br/>
    以下が、各フレームワークで選択できるレンダリング手法です。<br/>
    Next.js, Nuxt共に、ページ毎にレンダリングモードの選択が可能になっています。<br/>
    それぞれのレンダリング手法の詳細は以下リンク先を参照してください。<br/>
  </p>

  <ul>
    <li><a href="./react/next_rendering">Next.js のレンダリング</a></li>
    <li><a href="./vue/nuxt_rendering">Nuxt のレンダリング</a></li>
  </ul>
  <br/>

  各フレームワークで使用できるレンダリング手法を整理すると以下のようになります。<br/>
  <div class="slider" style="width: 100%">
    <table border="1">
      <tr><th rowspan="2" style="z-index:0">手法</th><th colspan="2">可否</th><th rowspan="2">備考</th></tr>
      <tr><th style="z-index:1">Next.js</th><th style="z-index:1">Nuxt</th></tr>
      <tr><td>SSR(Server-Side Rendering)</td><td>●</td><td>●</td><td></td></tr>
      <tr><td>CSR(Client-Side Rendering)</td><td>●</td><td>●</td><td></td></tr>
      <tr><td>Universal Rendering</td><td>✖</td><td>●</td><td>SSRとCSRのいいとこどり<br/>Nuxtのデフォルトのレンダリングモード</td></tr>
      <tr><td>SSG(Static Site Generation)</td><td>●</td><td>●</td><td></td></tr>
      <tr><td>ISG(Incremental Static Generation)</td><td>●</td><td>●</td><td>同じISGでもNextとNuxtで内容が異なる。</td></tr>
      <tr><td>ISR(Incremental Static Regeneration)</td><td>●</td><td>✖</td><td></td></tr>
      <tr><td>On Demand ISR<br/>(On Demand Incremental Static Regeneration)</td><td>●</td><td>✖</td><td>ISRに柔軟性をもたせたような機能。<br/>任意のタイミングで更新可能。</td></tr>
    </table>
  </div>
  <br/>

  <br/>
  <span id="detail"></span>
  <h3 class="title">React/Next.js, Vue.js/Nuxt詳細</h3>
  <p>
    Next.jsやNuxtなどのフレームワークと組み合わせることで、レンダリング以外にも様々な機能が利用出来るようになります。<br/>
    React と Next.js, Vue.js と Nuxt を組わせてWebアプリケーションを構築する方法や、利用できる機能の詳細については以下リンク先参照。
  </p>
  <ul>
    <li><a href="react/react_next">React/Next.js</a></li>
    <li><a href="vue/vue_nuxt">Vue.js/Nuxt</a></li>
  </ul>

  <br/>
  <span id="thoughts"></span>
  <h3 class="title">React/Next.js, Vue.js/Nuxt を触ってみた感想</h3>
  <p>
    React/Next.jsとVue.js/Nuxtの両方を触ってみた感想です。<br/>
    React/Next.jsは自由度が高いなと感じました（.jsxの特徴かもしれない）。<br/>
    一つの関数の中にビジネスロジックとhtmlの生成処理を（良くも悪くも）書けてしまうので、メンテナンス性の悪いコードをうっかり書いてしまいがちに感じました。<br/>
    また、利用者が多いだけあって、困った時もググれば解決できることが多かったように思いました。<br/>
    一方、Vue.js/Nuxtは、SFCと言う仕組みを使う以上、ロジックとテンプレート(UI)を分けて書く事を強制されるので、この仕組みに収まる範囲であればメンテナンス性の高いコードになりやすいように感じました。<br/>
    ただし、これは感覚的な話であまり根拠はないですが、システムの規模が大きくなり複雑性が増した場合でもこのSFCの仕組みに収めることができるのかという点は疑問で、もし収まらなかった場合は一気に破綻してしまう恐れがあるように思いました。<br/>
    また、Vue/Nuxt は React/Next.js と比べると利用率が低いということと、Web上の記事はNuxt2と3の記事が混在している状態なので、困ったときに答えに辿り着きづらいように感じました。<br/>
  </p>

  <br/>
  <hr>

  <br/>
  参考書籍<br/>
  <ul>
    <li><a href="https://amzn.to/4cx3seQ" target="_blank" rel="noopener noreferrer"><Image src={ddd} width={200} alt='React.js&Next.js超入門 第2版' /><br/>React.js&Next.js超入門 第2版</a></li>
    <li><a href="https://amzn.to/4as09nr" target="_blank" rel="noopener noreferrer"><Image src={eee} width={200} alt='TypeScriptとReact/Next.jsでつくる実践Webアプリケーション開発' /><br/>TypeScriptとReact/Next.jsでつくる実践Webアプリケーション開発</a></li>
    <li><a href="https://amzn.to/3x59PG9" target="_blank" rel="noopener noreferrer"><Image src={fff} width={200} alt='Vue 3　フロントエンド開発の教科書' /><br/>Vue 3　フロントエンド開発の教科書</a></li>
    <li><a href="https://amzn.to/4atKcNQ" target="_blank" rel="noopener noreferrer"><Image src={ggg} width={200} alt='Nuxt 3　フロントエンド開発の教科書' /><br/>Nuxt 3　フロントエンド開発の教科書</a></li>
    <li><a href="https://amzn.to/4986MdE" target="_blank" rel="noopener noreferrer"><Image src={hhh} width={200} alt='Vue.js入門 基礎から実践アプリケーション開発まで' /><br/>Vue.js入門 基礎から実践アプリケーション開発まで</a></li>
  </ul>

  <br/>
  参考サイト<br/>
  <ul>
    <li><a href="https://devlog.mescius.jp/spa-javascript-framework-in-2020/" target="_blank" rel="noopener noreferrer">MESCIUS SPAの基本と3大JavaScriptフレームワーク（React、Angular、Vue.js）の最新動向 ～2023年版～</a></li>
    <li><a href="https://2024.stateofjs.com/ja-JP/libraries/front-end-frameworks/" target="_blank" rel="noopener noreferrer">State of JavaScript 2024</a></li>
    <li><a href="https://www.publickey1.jp/blog/23/state_of_javascript_20221reactnextjsjest4.html" target="_blank" rel="noopener noreferrer">Publickey 「State of JavaScript 2022」公開。利用率1位のフロントエンドライブラリはReact、レンダリングはNext.js、テストはJestなど、4万人のエンジニアが回答</a></li>
    <li><a href="https://relace.co.jp/blog/spadevelopment" target="_blank" rel="noopener noreferrer">RELACE MAGAZINE SPA開発とは？メリットや主要なフレームワークを紹介します</a></li>
    <li><a href="https://www.commte.co.jp/learn-nextjs/Virtual-DOM" target="_blank" rel="noopener noreferrer">Virtual DOM（仮想DOM）</a></li>

    <li><a href="https://dev.classmethod.jp/articles/nextjs-rendering/" target="_blank" rel="noopener noreferrer">DevelopersIO Next.jsのいろいろなレンダリング方法を確認する</a></li>
    <li><a href="https://techmania.jp/blog/javascript0008/" target="_blank" rel="noopener noreferrer">TECH MANIA Next.jsとは【入門】Reactとの違い、できること、メリット</a></li>
    <li><a href="https://scrapbox.io/teamlab-frontend/SSR,_CSR,_SSG,_ISG,_ISR%E3%81%AE%E9%81%95%E3%81%84%E3%81%A8%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91%E6%96%B9%E3%80%82%E3%81%9D%E3%82%8C%E3%81%9E%E3%82%8CNext.js%E3%81%A7Todo%E3%82%A2%E3%83%97%E3%83%AA%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%80%82" target="_blank" rel="noopener noreferrer">teamlab-frontend SSR, CSR, SSG, ISG, ISRの違いと使い分け方。それぞれNext.jsでTodoアプリ作ってみた。</a></li>

    <li><a href="https://developer.mamezou-tech.com/blogs/2022/12/18/nuxt3-hybrid-rendering/" target="_blank" rel="noopener noreferrer">豆蔵デベロッパーサイト Nuxt3で導入されたハイブリッドレンダリングとNuxt版ISG/ISRを試してみる</a></li>
    <li><a href="https://techmania.jp/blog/javascript0009/" target="_blank" rel="noopener noreferrer">TECH MANIA Nuxt.jsとは？Vue.jsとの違いやできること、メリットを解説</a></li>
    <li><a href="https://www.webstaff.jp/guide/trend/webit/nuxtjs/" target="_blank" rel="noopener noreferrer">転職GUIDE Nuxt.jsとは、Vue.jsを効果的に使うためのフレームワーク！導入のメリットは？【入門編】</a></li>
    <li><a href="https://deha.co.jp/magazine/vue-js-and-nuxt-js/" target="_blank" rel="noopener noreferrer">dehamagazine Vue.jsとNuxt.jsの違いは？徹底解説</a></li>
    <li><a href="https://career.levtech.jp/guide/knowhow/article/388/" target="_blank" rel="noopener noreferrer">Vue.jsとは？他フレームワークとの違いやできることをわかりやすく解説</a></li>

    <li><a href="https://www.sunapro.com/svelte/" target="_blank" rel="noopener noreferrer">すな.dev Svelteの差分検知方法</a></li>
    <li><a href="https://sbfl.net/blog/2019/12/04/svelte-frontend-1/" target="_blank" rel="noopener noreferrer">Subterranean Flower Svelteで始める頑張らないフロントエンド生活 前編</a></li>
    <li><a href="https://sbfl.net/blog/2020/02/03/svelte-frontend-2/" target="_blank" rel="noopener noreferrer">Subterranean Flower Svelteで始める頑張らないフロントエンド生活 後編</a></li>

    <li><a href="https://zenn.dev/musou1500/articles/2c10efc5015778d35d76" target="_blank" rel="noopener noreferrer">Zenn Angularの新しいレンダリングエンジンで採用された "incremental-dom" とは何なのか</a></li>
  </ul>

  <footer>
    <small><a href="https://taumax-develop.github.io/">とあるＩＴエンジニアの知識整理</a> All Rights Reserved.</small>
    <span class="pr"><a href="https://template-party.com/" target="_blank">《Web Design:Template-Party》</a></span>
  </footer>
</SiteLayout>
