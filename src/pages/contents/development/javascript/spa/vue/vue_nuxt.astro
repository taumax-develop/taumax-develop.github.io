---
import SiteLayout from '../../../../../../layouts/SiteLayout.astro';
import { Image } from "astro:assets";
import { TWITTER_CARD_SUMMARY } from '../../../../../../components/BaseHead.astro';
import _app from './img/react_next/_app.jpg';
import { BASE_URL } from '../../../../../../consts';
import vue_life_cycle from './img/vue_nuxt/vue_life_cycle.jpg';
import vueコード例 from './img/vue_nuxt/vueコード例.jpg';
import コンポーネント構造 from './img/vue_nuxt/コンポーネント構造.jpg';
import ラジオボタン1 from './img/vue_nuxt/ラジオボタン1.jpg';
import ラジオボタン2 from './img/vue_nuxt/ラジオボタン2.jpg';
import vue3 from '../img/vue3.jpg';
import nuxt3 from '../img/nuxt3.jpg';
import vuejs入門 from '../img/vuejs入門.jpg';

const indexList = [
  { id: '#firstly', name: 'はじめに' },
  { id: '#vue', name: 'Vue.js' },
  { id: '#sfc', name: 'SFC' },
  { id: '#hooks', name: 'フック' },
  { id: '#mustache', name: 'ﾏｽﾀｯｼｭ構文' },
  { id: '#directive', name: 'ﾃﾞｨﾚｸﾃｨﾌﾞ' },
  { id: '#file_path_router', name: 'ファイルパスルータ' },
  { id: '#nuxt', name: 'Nuxt' },
  { id: '#rendering', name: 'レンダリング' },
  { id: '#what_i_made', name: '作った物' },
];
---

<SiteLayout
  title="Next.jsのレンダリング"
  description="Next.jsのレンダリングについて"
  twitterCardSize={TWITTER_CARD_SUMMARY}
  indexList={indexList}
>

  <h2 class="title">Vue.js/Nuxt</h2>

  <ul class="breadcrumb">
    <li class="breadcrumbli"><a href={BASE_URL}>ホーム</a></li>
    <li class="breadcrumbli"> > <a href=`${BASE_URL}/contents/development/javascript/js_index`>JavaScript</a></li>
    <li class="breadcrumbli"> > <a href=`${BASE_URL}/contents/development/javascript/spa/spa`>SPA</a></li>
    <li class="breadcrumbli"> > Vue.js/Nuxt</li>
  </ul>

  <br/>
  <span id="firstly"></span>
  <h3 class="title">はじめに</h3>
  <p>
    このページは、<a href=`${BASE_URL}/contents/development/javascript/spa/spa`>SPA(Single Page Application)</a>の続きのページです。<br/>
    ここではVue.jsとNuxtにスポットを当てて記載していきます。<br/>
    一応このページから読み進めても問題ないように構成したつもりですが、先のページを見てからの方が、Vue.jsとNuxtについて理解が深まるかもしれません。<br/>
  </p>

  <br/>
  <span id="vue"></span>
  <h3 class="title">Vue.js</h3>
  <p>
    Vue.jsは、DOM要素とJavaScriptのデータを結びつけるリアクティブなデータバインディングを提供するフレームワークです。2014年にリリースされました。<br/>
    リアクティブ・プログラミングを特徴としています。リアクティブとは、『何かの値が変化するとそれに連動して表示内容が自動で変化する仕組み』のことです。<br/>
    2020年9月にVue3がリリースされましたが、その時点では、Vueに付随する主要なモジュールがバージョン3未対応のままという状態でした。<br/>
    2022年2月7日に主要なモジュールも含めて、Vueを作成するプロジェクトのデフォルトのバージョンが3になりました。Vue3で<a href=`${BASE_URL}/contents/development/javascript/typescript`>TypeScript</a>にも対応しました。<br/>
    Vue.jsは、SFC(Single File Components)とVueインスタンスがリアクティブなシステムを作る上でのポイントとなります。<br/>
  </p>

  <br/>
  <span id="sfc"></span>
  <h4>SFC(Single File Components)</h4>
  <p>
    Vueプロジェクトでは、SFC(Single File Components)という拡張子.vueのファイルを作成します。SFCはHTMLとCSS、それらを制御するJavaScriptをワンセットで画面を部品化したものです。<br/>
    SFCで作ったコンポーネントを組み合わせてUIを構築していくのがVueの仕組みです。<br/>
  </p>

<pre class="title"><code class="title">.vueファイル構造</code></pre>
<pre><code>&lt;script setup lang="ts"&gt;
...
&lt;/script&gt;

&lt;template&gt;
...
&lt;/template&gt;

&lt;style&gt;
...
&lt;/style&gt;
</code></pre>

  <br/>
  <p>
    <code>&lt;script&gt;&lt;/script&gt;</code>内にJavaScriptを、<code>&lt;template&gt;&lt;/template&gt;</code>にブラウザのbody部に表示する内容を、<code>&lt;style&gt;&lt;/style&gt;</code>に適応するCSSをコーディングしていきます。<br/>
  </p>

  <br/>
  <span id="hooks"></span>
  <h4>ライフサイクルフック</h4>
  <p>
    この<code>&lt;script&gt;&lt;/script&gt;</code>内でVueインスタンスを生成し、Vueインスタンスを介して<code>&lt;template&gt;&lt;/template&gt;</code>を操作することでリアクティブなシステムを実現しています。<br/>
    操作するにはVueのライフサイクルフック及び、Vueインスタンス内に定義した関数を使用する必要があり、以下のようなものがあります。<br/>

    <br/>
    <Image src={vue_life_cycle} width="800" alt="vue_life_cycle"/><br/>
    ※図は書籍、<a href="https://amzn.to/3x59PG9" target="_blank" rel="noopener noreferrer">Vue 3　フロントエンド開発の教科書</a> P150の図を管理人が独自に加筆・修正したもの<br/>
  </p>

  <br/>
  <div class="slider" style="width: 100%">
    <table border="1">
      <tr><th style="z-index: 0">ライフサイクル名</th><th>フック名</th><th>概要</th></tr>
      <tr><td>①起動処理</td><td>-</td><td>Vueアプリケーション起動</td></tr>
      <tr>
        <td>②Vueアプリケーションの初期化処理</td>
        <td>
          <ul class="indent_no">
            <li>beforeCreate</li>
            <li>created</li>
          </ul>
        </td>
        <td>
          Vueアプリケーション初期化。この段階でスクリプトブロック内のコードが<br/>
          実行され、テンプレート変数や算出プロパティ、メソッドなどが準備される。
        </td>
      </tr>
      <tr>
        <td>③コンポーネントの解析処理</td>
        <td>-</td>
        <td>
          コンポーネントの解析処理。テンプレートブロック内のコードが解析され、<br/>
          タグ構成（DOM構造）が決定。
        </td>
      </tr>
      <tr>
        <td>④レンダリング処理</td>
        <td>
          <ul class="indent_no">
            <li>beforeMount</li>
            <li>mounted</li>
          </ul>
        </td>
        <td>③で決定したDOM構造がレンダリング。</td>
      </tr>
      <tr>
        <td>⑤表示状態(Mounted)</td>
        <td>-</td>
        <td>
          ④のレンダリングが終わると表示状態になり、画面が見えるようになる。<br/>
          この状態をMountedと呼んでいる。
        </td>
      </tr>
      <tr>
        <td>
          ⑥リアクティブシステムによる<br/>
          再レンダリング処理
        </td>
        <td>
          <ul class="indent_no">
            <li>beforeUpdated</li>
            <li>updated</li>
          </ul>
        </td>
        <td>
          リアクティブシステムにより再レンダリングが必要になった際に行われる処理。<br/>
          再レンダリングが終わると再びMountedになる。
        </td>
      </tr>
      <tr>
        <td>⑦非表示処理</td>
        <td>
          <ul class="indent_no">
            <li>beforeUnmount</li>
            <li>unmount</li>
          </ul>
        </td>
        <td>表示が不要になったコンポーネントに非表示処理を行う。</td>
      </tr>
      <tr><td>⑧非表示状態(Unmounted)</td><td>-</td><td>非表示処理が完了すると、コンポーネントは非表示状態になります。<br/>この状態をUnmountedと呼んでいる。</td></tr>
      <tr><td>⑨リアクティブ変数への初回アクセス</td><td>renderTracked</td><td></td></tr>
      <tr><td>⑩再レンダリングの際に<br/>リアクティブ変数へのアクセス</td><td>renderTriggered</td><td></td></tr>
    </table>
  </div>

  <br/>
  <p>
    Vueインスタンスに定義したdataをtemplateに埋め込み、フックや関数を介してdataを操作することでリアクティブなシステムを構築することができます。<br/>
    以下はVue.jsのコード例です。VueインスタンスにoutMsgとinMsgを定義し、ライフサイクルフックの created でデフォルト値を設定。<br/>
    textに入力すると「だよ」という文字列を付与してブラウザに表示します。<br/>
    ※ created なんて使わずに <code>outMsg: 'default message.'</code> と定義すればいいのですが、サンプルなので無理矢理ですが created を使ってみました。<br/>

    <br/>
    恐ろしく簡素なページですが、一応以下のリンク先で実際に触ることができます。<br/>
    <a href="https://sagamax.cyou/romasaga3/test" target="_blank" rel="noopener noreferrer">サンプル</a><br/>

    <br/>
    ソースコードは以下の通り。<br/>
  </p>


<pre><code>{`&lt;script lang="ts"&gt;
export default {
data() {
return {
  outMsg: '',
  inMsg: ''
}
},
created: function() {
this.outMsg = 'default message.'
},
methods: {
execFunc: function() {
  if (this.inMsg !== '') {
    this.outMsg = this.inMsg + 'だよ'
  } else {
    this.outMsg = 'no message.'
  }
}
}
}
&lt;/script&gt;

&lt;template&gt;
&lt;div id="app"&gt;
&lt;input type='text' v-model="inMsg" v-on:input="execFunc" placeholder='何か入力' style="color: black"/&gt;
&lt;p style="color: black"&gt;{{ outMsg }}&lt;/p&gt;
&lt;/div&gt;
&lt;/template&gt;
`}</code></pre>


  <br/>
  <p>
    構造を図解するとこんな感じです。<br/>
    <Image src={vueコード例} style="border: solid 1px #FFFFFF" width="700" alt="vueコード例"/><br/>
  </p>

  <br/>
  <span id="mustache"></span>
  <h4 class="title">マスタッシュ構文</h4>
  <p>
    上記コードの<code>{`{{ outMsg }}`}</code> はマスタッシュ構文と呼ばれるもので、スクリプトブロックで用意した変数を表示するための構文です。ここではスクリプトブロック内で宣言した変数 outMsg を表示しています。タグとタグに囲まれた部分（要素のテキスト部分）にしか使えません。<br/>
  </p>

  <br/>
  <span id="directive"></span>
  <h4 class="title">ディレクティブ</h4>
  <p>
    <code>v-model</code> や <code>v-on</code> という属性はディレクティブと呼ばれるもので、 template 内の属性にデータや関数などをバインドするものです。主なディレクティブには以下のようなものがあります。
  </p>

  <table border="1">
    <tr><th>ディレクティブ</th><th>役割</th></tr>
    <tr><td>v-bind</td><td>データバインディング</td></tr>
    <tr><td>v-on</td><td>イベント処理</td></tr>
    <tr><td>v-model</td><td>双方向データバインディング</td></tr>
    <tr><td>v-html</td><td>HTML 文字列表示</td></tr>
    <tr><td>v-pre</td><td>静的コンテンツ表示</td></tr>
    <tr><td>v-once</td><td>データバインディングを初回のみに制限</td></tr>
    <tr><td>v-cloak</td><td>マスタッシュ構文の非表示</td></tr>
    <tr><td>v-if</td><td>条件分岐</td></tr>
    <tr><td>v-show</td><td>表示・非表示の制御</td></tr>
    <tr><td>v-for</td><td>ループ処理</td></tr>
  </table>

  <br/><br/>
  <span id="file_path_router"></span>
  <h4>ファイルパスルータ</h4>
  <p>
    Vueにはファイルパスルータという機能があります。これは<a href=`${BASE_URL}/contents/development/javascript/spa/react/react_next.html#filebase_routing`>Next.jsのファイルベースルーティング</a>と同じものと考えていいと思います。<br/>
    pages フォルダ配下に格納するファイルパスの構造がそのままルーティングパスになります。<br/>
  </p>

  <br/>
  <span id="nuxt"></span>
  <h3 class="title">Nuxt</h3>
  <p>
    2022年11月16日にVue3に対応したNuxt3がリリース。ネット上はNuxt2とNuxt3の記事が混在している印象がある（2024年3月現在）ので、閲覧している情報がNuxt2のことを言っているのか3のことを言っているのか注意する必要がある。<br/>
    Nuxt2までは、アプリケーション全体で1つのレンダリングモード(SPA/SSG/SSR)しか指定できませんでした。<br/>
    Nuxt3でページ単位にレンダリングモードを指定できるようになり、種類も増えて大幅に進化しています。Nuxt3で<a href=`${BASE_URL}/contents/development/javascript/typescript`>TypeScript</a>にも対応しました。<br/>
  </p>

  <br/>
  <span id="rendering"></span>
  <h4 class="title">レンダリング</h4>
  <p>
    Nuxtで使えるレンダリングモードとその実装方法は<a href=`${BASE_URL}/contents/development/javascript/spa/vue/nuxt_rendering`>別ページでまとめているのでそちら</a>参照。<br/>
  </p>

  <br/>
  <span id="what_i_made"></span>
  <h3 class="title">作った物</h3>
  <p>
    ゲームのサガシリーズが好きなので、シリーズの中でも1, 2を争う人気のロマンシングサガ3に関するものを作ってみました。<br/>
    ロマサガ3の記事としては未完成ですが、Vue.js/Nuxtアプリケーションとしてはとりあえず動くようにはなっている状態。とりあえず作った後に勉強したので今見ると作り直したくなる感じはあるが、一旦現時点（2024年5月）のものとして公開してみます。<br/>

    <br/>
    各ページのレイアウトを統一するために、共通部分を CommonBody, CommonHeader, CommonFooter に分け、ページ毎に異なる部分を別途作成してそれを埋め込む形で作成しています。<br/>
    <Image src={コンポーネント構造} width="500" alt="コンポーネント構造"/><br/>

    <br/><br/>
    コードレベルだと以下のようになっています（かなり簡略化しています）。<br/>
    以下は共通のフッター。共通のボディ部から呼び出す。<br/>
  </p>


<pre class="title"><code class="title">CommonFooter.vue</code></pre>
<pre><code>&lt;template&gt;
&lt;div&gt;
&lt;footer&gt;
"フッターに記載する内容をここに書く"
&lt;/footer&gt;
&lt;/div&gt;
&lt;/template&gt;
</code></pre>



  <br/><br/>
  <p>
    以下は共通のbody部。<code>&lt;CommonFooter /&gt;</code>の所で上記CommonFooterコンポーネントを呼び出し。<br/>
    CommonBodyを呼び出した側で pageTitle を設定し、<code>{`&lt;h2&gt;{{ pageTitle }}&lt;/h2&gt;`}</code>に代入。<br/>
    <code>&lt;slot name="body"&gt;&lt;/slot&gt;</code>の部分に、呼び出し側の<code>&lt;template v-slot:body&gt;</code>の内容を埋め込む。
  </p>


<br/>
<pre class="title"><code class="title">CommonBody.vue</code></pre>
<pre><code>{`&lt;script setup lang="ts"&gt;
interface Props {
pageTitle: string   // 当コンポーネントの呼び出し元で設定する変数を定義
}
defineProps&lt;Props&gt;()
&lt;/script&gt;

&lt;template&gt;
&lt;body&gt;
&lt;section&gt;
&lt;h2&gt;{{ pageTitle }}&lt;/h2&gt;  // 定義した変数を設定
&lt;slot name="body"&gt;&lt;/slot&gt;
&lt;br/&gt;
&lt;/section&gt;
&lt;CommonFooter /&gt;  // 上で定義したFooterをここに読み込む
&lt;/body&gt;
&lt;/template>
`}</code></pre>


  <br/><br/>
  <p>
    各ページの内容を pages ディレクトリ配下に作成。<br/>
    ファイル名を page.vue としているため、サーバー起動後、http://ホスト名:3000/page でアクセスできる。
  </p>

<pre class="title"><code class="title">pages/page.vue</code></pre>
<pre><code>&lt;template&gt;
&lt;CommonBody v-bind:pageTitle="ページのタイトルをここに入れる"&gt;
&lt;template v-slot:body&gt;
ページ毎の内容をここに書く。
v-slot:body としているため、CommonBody.vueの「&lt;slot name="body"&gt;&lt;/slot&gt;」に埋め込まれる。
&lt;/template&gt;
&lt;/CommonBody&gt;
&lt;/template&gt;

&lt;script setup lang="ts"&gt;
スクリプトをここに書く
&lt;/script&gt;
</code></pre>


  <br/><br/>
  <p>
    基本的に上記のような構成で全てのページを作成しています。<br/>
    実際に作った物は大まかに以下。<br/>
  </p>

  <ul>
    <li>ロマサガ3のキャラクター一覧</li>
    <li>一覧から詳細への遷移</li>
    <li>詳細画面でラジオボタンを選択すると画像が切り替わる</li>
  </ul>

  <br/>
  <p>
    ゲーム内に登場する<a href="https://sagamax.cyou/romasaga3/character/characters" target="_blank" rel="noopener noreferrer">キャラクターの一覧がこちら</a>。テーブルのヘッダー部分を操作することで表示対象を絞ったり、並び替えができるようになっており、その度に一覧の部分だけが再レンダリングされるようになっています。<br/>
    また、一覧のキャラクター名がリンクになっていて、そこから当該キャラクターの詳細情報を確認できる画面に遷移できるようになっています<br/>
    <!-- （詳細画面の一例は<a href="https://sagamax.cyou/romasaga3/character/detail/julian?destiny=歳星&weapon=なし" target="_blank" rel="noopener noreferrer">こちら</a>）。<br/> -->
    詳細画面ではラジオボタンを選択することで表示する画像が切り替わるようになっている部分があり、これもその部分だけがリアクティブに切り替わるようになっています。<br/>

    <br/>
    初期表示<br/>
    <Image src={ラジオボタン1} alt="ラジオボタン1"/><br/>

    <br/>
    ラジオボタンの選択を変更すると、それに対応する画像に切り替わるようになっている。<br/>
    <Image src={ラジオボタン2} alt="ラジオボタン2"/><br/>
  </p>

  <br/>
  Vue.js/Nuxtを使って作ってみたものの紹介は以上です。<br/>

  <br/>
  <hr>

  <br/>
  参考書籍<br/>
  <ul>
    <li><a href="https://amzn.to/3x59PG9" target="_blank" rel="noopener noreferrer"><Image src={vue3} width="200" alt="Vue 3　フロントエンド開発の教科書"/></a></li>
    <li><a href="https://amzn.to/4atKcNQ" target="_blank" rel="noopener noreferrer"><Image src={nuxt3} width="200" alt="Nuxt 3　フロントエンド開発の教科書"/></a></li>
    <li><a href="https://amzn.to/4986MdE" target="_blank" rel="noopener noreferrer"><Image src={vuejs入門} width="200" alt="Vue.js入門 基礎から実践アプリケーション開発まで"/></a></li>
  </ul>

  <br/>
  参考サイト<br/>
  <ul>
    <li><a href="https://nuxt.com/docs/guide/concepts/rendering" target="_blank" rel="noopener noreferrer">Nuxt Rendering Modes</a></li>
    <li><a href="https://developer.mamezou-tech.com/blogs/2022/12/18/nuxt3-hybrid-rendering/" target="_blank" rel="noopener noreferrer">豆蔵デベロッパーサイト Nuxt3で導入されたハイブリッドレンダリングとNuxt版ISG/ISRを試してみる</a></li>
    <li><a href="https://theblueback.com/post-20230521022312" target="_blank" rel="noopener noreferrer">【Nuxt3×SPA×SSR】ハイブリッドレンダリングを駆使してFirebaseでホスティングする</a></li>
    <li><a href="https://zenn.dev/mm67/articles/nuxt3-rendering-modes" target="_blank" rel="noopener noreferrer">Zenn [和訳] Nuxt3 公式サイト~Rendering Modes</a></li>
    <li><a href="https://kentico.jp/kontent/blog/demystify-nuxt-target-mode-and-ssr-properties" target="_blank" rel="noopener noreferrer">Kontent. Nuxt.jsのtarget、mode、およびssrプロパティをわかりやすく説明します</a></li>
    <li><a href="https://developer.mamezou-tech.com/nuxt/nuxt3-rendering-mode/" target="_blank" rel="noopener noreferrer">豆蔵デベロッパーサイト Nuxt3入門(第1回) - Nuxtがサポートするレンダリングモードを理解する</a></li>
  </ul>
</SiteLayout>
