---
import { Image } from "astro:assets";
import SiteLayout from "../../../../../layouts/SiteLayout.astro";
import play_with_nodejs from './img/play_with_nodejs.jpg';
import chanel_point from './img/chanel_point.jpg';
import auto_post from './img/auto_post.jpg';
import { TWITTER_CARD_SUMMARY } from '../../../../../components/BaseHead.astro';
import { BASE_URL } from "../../../../../consts";
import AdUnit from "../../../../../components/AdUnit.astro";

const indexList = [
  { id: "firstly", name: "はじめに" },
  { id: "implementation", name: "作った物" },
  { id: "impletentation", name: "実装" },
];
---

<SiteLayout
  title="Node.js × Twitch, Twitter, OBS"
  description="Node.jsを使って自作したシステムについて"
  twitterCardSize={TWITTER_CARD_SUMMARY}
  indexList={indexList}>

  <h2 class="title">Node.js × Twitch, Twitter, OBS</h2>

  <ul class="breadcrumb">
    <li class="breadcrumbli"><a href={BASE_URL}>ホーム</a></li>
    <li class="breadcrumbli"> > <a href=`${BASE_URL}/contents/development/javascript/js_index`>js関連技術</a></li>
    <li class="breadcrumbli"> > <a href=`${BASE_URL}/contents/development/javascript/nodejs/nodejs`>Node.js</a></li>
    <li class="breadcrumbli"> > Node.js × Twitch, Twitter, OBS</li>
  </ul>

  <br/>
  <AdUnit />

  <br/>
  <span id="firstly"></span>
  <h3 class="title">はじめに</h3>
  <p>
    このページでは、自分が Node.js を使って実際に作った物について記載しています。<br/>
    <a href=`${BASE_URL}/contents/development/javascript/nodejs/nodejs`>Node.js</a>の記事を読んだ前提で書いています。今見ているこの頁の1階層上の記事です。<br/>
    EventEmitter という単語を見てピンと来ないようなら、<a href=`${BASE_URL}/contents/development/javascript/nodejs/nodejs#async`>非同期のイベント駆動型ランタイム</a>の部分だけでも読んでください。<br/>
  </p>

  <br/>
  <span id="implementation"></span>
  <h3 class="title">作った物</h3>
  <p>
    Twitch というプラットフォームを使ってゲームの配信をしているのですが、Node.jsを使ってbotを動かすなど、いろいろカスタマイズしています。そのシステム構成が以下の図。<br/>
    下図の右下の OBS Studio はゲーム配信するためのツールです。 <a href="https://github.com/obs-websocket-community-projects/obs-websocket-js" target="_blank" rel="noopener noreferrer">obs-websocket-js</a> というライブラリを使って、Node.js から WebSocket 経由で操作しています。<br/>
    <Image src={play_with_nodejs} width={800} alt="play_with_nodejs" /><br/>
  </p>

  <br/>
  カスタマイズの例<br/>
  <ol>
    <li>
      チャンネルポイント使用→webhook→チャット→OBS操作<br/>
      Twitch にはチャンネルポイントという機能があり、（普通こんな使い方はしないと思うのですが）ポイントが使用されたら任意のサーバーに Webhook リクエストを飛ばすこともできます。<br/>
      サーバに Webhook が飛んで来たらそれに対応するメッセージをチャットに投げて、そのチャットをトリガーに EventEmitter でローカルの Node.js を稼働させ、WebSocket 経由で OBS を操作しています（下図の赤線の流れ）。<br/>
      <Image src={chanel_point} width={800} alt="chanel_point" /><br/>

      <br/>
      以下がチャンネルポイントを使った例(2h9m35s頃)。<br/>
      ①TwitchからWebhook を受けて<br/>
      ②「やきつくしてさしあげますわ！」という台詞をbotが喋り<br/>
      ③その台詞をトリガーにローカルの Node.js が稼働し<br/>
      ④OBS を操作することで画面に炎を表示させたり、音声を流したりしています。<br/>
    </li>
    <iframe src="https://player.twitch.tv/?video=2098995290&time=2h9m35s&parent=taumax-develop.github.io" frameborder="0" allowfullscreen="true" scrolling="no" height="378" width="620"></iframe>
    <li>
      配信開始→Webhook→twitter<br/>
      配信を開始した際にもWebhookリクエストを飛ばすことができるので、それをトリガーにX（旧twitter）に配信開始を告知しています（下図の赤線の流れ）。<br/>
      <Image src={auto_post} width={800} alt="auto_post" /><br/>

      <br/>
      以下が実際のポスト。<br/>
    </li>
    <blockquote class="twitter-tweet"><p lang="ja" dir="ltr">twitch配信通知bot<br>twitchでロマサガ3配信中です！<br>お時間合う方是非遊びに来てみてくださーい。<br>▶️視聴はこちら：<a href="https://t.co/P46Z6JrYH1">https://t.co/P46Z6JrYH1</a><a href="https://twitter.com/hashtag/%E3%83%AD%E3%83%9E%E3%82%B5%E3%82%AC3?src=hash&amp;ref_src=twsrc%5Etfw">#ロマサガ3</a> <a href="https://twitter.com/hashtag/%E3%83%AC%E3%83%88%E3%83%AD%E3%82%B2%E3%83%BC%E3%83%A0?src=hash&amp;ref_src=twsrc%5Etfw">#レトロゲーム</a> <a href="https://twitter.com/hashtag/%E3%83%AC%E3%83%88%E3%83%AD%E3%82%B3%E3%83%B3%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%9E%E3%83%BC%E6%84%9B%E5%A5%BD%E4%BC%9A?src=hash&amp;ref_src=twsrc%5Etfw">#レトロコンシューマー愛好会</a> <a href="https://t.co/UeLX1jIXB8">pic.twitter.com/UeLX1jIXB8</a></p>&mdash; sagamax@サガとレトロゲー (@sagamax__) <a href="https://twitter.com/sagamax__/status/1708089149629301126?ref_src=twsrc%5Etfw">September 30, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
  </ol>

  <br/>
  以降、この中身がどうなっているのかについて説明していきます。<br/>

  <br/>
  <AdUnit />

  <br/>
  <span id="impletentation"></span>
  <h3 class="title">実装</h3>
  <p>
    以下リンク先で、 Node.js と Twitch の組み合わせ部分、 Twitter との組み合わせ部分、 OBS との組み合わせ部分の3つに分けて説明しています。<br/>
    開発する前に、以下のように package.json に "private": true を追記しておくといいと思います。これがあるとモジュールの公開ができなくなります。公開する気がない場合は念のため記載していた方がまあ安全かなと思います。<br/>
  </p>

<pre class="title"><code class="title">package.json</code></pre>
<pre><code>{`{
  "private": true,
  ...
}`
}</code></pre>


  <br/>
  <ul>
    <li><a href=`${BASE_URL}/contents/development/javascript/nodejs/twitch`>Node.js × twitch</a></li>
    <li><a href=`${BASE_URL}/contents/development/javascript/nodejs/twitter`>Node.js × twitter</a></li>
    <li><a href=`${BASE_URL}/contents/development/javascript/nodejs/obs`>Node.js × OBS</a></li>
  </ul>

  <br/>
  <hr>

  <br/>
  参考サイト<br/>
  <ul>
    <li><a href="https://github.com/obs-websocket-community-projects/obs-websocket-js" target="_blank" rel="noopener noreferrer">obs-websocket-js</a></li>
  </ul>
</SiteLayout>
