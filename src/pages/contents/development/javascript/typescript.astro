---
import SiteLayout from '../../../../layouts/SiteLayout.astro';
import { TWITTER_CARD_SUMMARY } from '../../../../components/BaseHead.astro';
import { BASE_URL } from '../../../../consts';

const indexList = [
  { id: '#firstly', name: 'はじめに' },
  { id: '#altjs', name: 'AltJS' },
  { id: '#typescript', name: 'TypeScript' },
  { id: '#define_type', name: '型の定義' },
  { id: '#variables', name: '変数' },
  { id: '#list', name: '配列' },
  { id: '#object_type', name: 'オブジェクト型' },
  { id: '#function', name: '関数' },
  { id: '#tsconfig', name: 'tsconfig.json' }
];
---
<SiteLayout
  title="TypeScript"
  description="代表的なAltJSの一つであるTypeScriptについて"
  twitterCardSize={TWITTER_CARD_SUMMARY}
  indexList={indexList}
>

  <h2 class="title">TypeScript</h2>

  <ul class="breadcrumb">
    <li class="breadcrumbli"><a href={BASE_URL}>ホーム</a></li>
    <li class="breadcrumbli"> > <a href=`${BASE_URL}/contents/js_index`>js関連技術</a></li>
    <li class="breadcrumbli"> > TypeScript</li>
  </ul>

  <br/>
  <span id="firstly"></span>
  <h3 class="title">はじめに</h3>
  <p>
    このページは、<a href=`${BASE_URL}/contents/js_index`>JavaScriptの進化</a>の続きのページです。<br/>
    ここではもっとも代表的なAltJSであるTypeScriptにスポットを当てて記載していきます。<br/>
    一応このページから読み進めても問題ないように構成したつもりですが、先のページを見てからの方が、TypeScriptが生まれるまでの背景がわかって面白いかもしれません。<br/>
  </p>

  <br/>
  <span id="altjs"></span>
  <h3 class="title">AltJS</h3>
  <p>
    AltJS（代替JavaScript言語）とは、コンパイルすることでJavaScriptが生成されるプログラミング言語です。<br/>
    TypeScriptとCoffeeScript辺りが有名ですが、なかでもTypeScriptは<a href=`${BASE_URL}/contents/spa/spa`>SPA(Single Page Splication)</a>のフレームワークでも対応されているほど標準的なものとして受け入れられています。<br/>
    ここではTypeScriptについて記載していきます。<br/>
  </p>

  <br/>
  <span id="typescript"></span>
  <h3 class="title">TypeScript</h3>
  <p>
    TypeScriptは2012年に登場した、Microsoft製のAltJSです。フリーかつオープンソースで提供されており、中規模〜大規模な開発を想定しており、以下のような仕様があります。<br/>
  </p>

  <ul>
    <li>型定義</li>
    <li>null/undefine安全</li>
    <li>汎用的なクラスやメソッドの型を実現するジェネリック</li>
    <li>エディターによる入力補完</li>
    <li>その他のECMAで定義されているJavaScriptの最新仕様</li>
  </ul>

  <p>
    TypeScriptで記述されたソースコードはビルドツールを通じて最終的にはJavaScriptに変換されるため、JavaScriptで実装したものと比べてパフォーマンスも差異はなく、また、古いブラウザをターゲットにしたトランスパイルも可能です。このため、実行環境などが導入の障壁になることはあまりないでしょう。<br/>
    <br/>
    TypeScriptを採用するデメリットを挙げるとすれば以下のような点です。<br/>
  </p>

  <ul>
    <li>プロジェクトの規模によってはコンパイルに時間がかかる</li>
    <li>導入のための学習コストがかかる</li>
  </ul>

  <br/>
  <spam id="define_type"></spam>
  <h3 class="title">型の定義</h3>
  <p>
    TypeScriptの最大の特徴は型の定義です。型注釈(Type Annotation)と呼ばれる方情報を付与することで、変数や引数に格納する型を制限できます。<br/>
    なお、型注釈は変数のデータ型が明らかな場合など、一部の条件では省略できます。<br/>


<pre><code>{`function sayHello(name: string) {
  console.log(name)
}

let name: string = 'aaa'
sayHello(name)
</code></pre>

        <br/>
        <span id="variables"></span>
        <h4 class="title">変数の型定義</h4>
<pre><code>const age: number = 30
let isDone: boolean = true
let name: string = 'abc'
`}</code></pre>


        <br/>
        <span id="list"></span>
        <h4 class="title">配列の型定義</h4>

<pre><code>const array: string[] = ['aaa', 'bbb']
array.push('ccc')
array.push(1) // ←型が合わないためエラー
</code></pre>

        <br/>
        <span id="object_type"></span>
        <h4 class="title">オブジェクト型の型定義</h4>
<pre><code>{`{ キー名1: 型1, キー名2: 型2, キー名3: 型3 }`}</code></pre>

        <br/>

<pre><code>{`const user: { name: string, age: number } = {
  name: 'aaa',
  age: 36
}
console.log(user.name)
console.log(user.age)
`}</code></pre>


  <br/>
  <span id="function"></span>
  <h4 class="title">関数の型定義</h4>

<pre><code>function(引数1: 型1, 引数2: 型2): 戻り値 {
  // 
}
</code></pre>

        <br/>
<pre><code>{`function sayHello(name: string): string {
  return \`こんにちは\${name}\`
}
sayHello('aaa') // こんにちはaaa
`}</code></pre>

        <br/>
        <p>
          オプショナルや引数のデフォルト値を使用することもできます<br/>
        </p>

<pre class="title"><code class="title">オプショナル</code></pre>
<pre><code>{`function sayHello(name: string, greeting?: string): string {
  return \`\${greeting} \${name}\`
}
sayHello('aaa') // aaa
sayHello('aaa', 'hello') // hello aaa
`}</code></pre>

        <br/>
<pre class="title"><code class="title">引数にデフォルト値指定</code></pre>
<pre><code>{`function sayHello(name: string, greeting: string = 'hello'): string {
  return \`\${greeting} \${name}\`
}
sayHello('aaa') // hello aaa
sayHello('aaa', 'hey') // hey aaa
`}</code></pre>


  <br/>
  <span id="tsconfig"></span>
  <h3 class="title">tsconfig.json</h3>
  <p>
    TypeScriptではコンパイルに必要なオプションやコンパイル対象となるファイルの情報をtsconfig.jsonに記述します。<br/>
    <code>tsc --init</code>コマンドを実行することでデフォルトのtsconfig.jsonが作成されます。プロジェクトルートに配置しましょう。<br/>
    tsconfig.jsonの詳細なオプションについては以下公式ドキュメント参照<br/>
    <a href="https://www.typescriptlang.org/tsconfig" target="_blank" rel="noopener noreferrer">TypeScript Compiler Options</a>
  </p>
  <br/>

<pre class="title"><code class="title">tsconfig.json</code></pre>
<pre><code>{`{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}
`}</code></pre>


  <br/><br/>
  <hr>

  <br/>
  参考書籍<br/>
  <ul>
    <li><a href="https://amzn.to/4as09nr" target="_blank" rel="noopener noreferrer"><img src="./spa/img/typescript_react_next.jpg" width="200"/><br/>TypeScriptとReact/Next.jsでつくる実践Webアプリケーション開発</a></li>
    <li><a href="https://amzn.to/3TPf5Xr" target="_blank" rel="noopener noreferrer"><img src="./img/実践TypeScript.jpg" width="200"/><br/>実践TypeScript</a></li>
  </ul>

  <br/>
  参考サイト<br/>
  <ul>
    <li><a href="https://staff.persol-xtech.co.jp/hatalabo/it_engineer/222.html" target="_blank" rel="noopener noreferrer">パーソル クロステクノロジー altJS(代替JavaScript言語)とは？選び方と注意点を徹底比較！</a></li>
    <li><a href="https://tech-camp.in/note/technology/41177/" target="_blank" rel="noopener noreferrer">TECH CAMPブログ AltJSの選び方解説！注目の代替JavaScript言語を徹底比較</a></li>
    <li><a href="https://www.typescriptlang.org/tsconfig" target="_blank" rel="noopener noreferrer">TypeScript Compiler Options</a></li>
  </ul>
</SiteLayout>
