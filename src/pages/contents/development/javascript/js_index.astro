---
import SiteLayout from '../../../../layouts/SiteLayout.astro';
import { TWITTER_CARD_SUMMARY } from '../../../../components/BaseHead.astro';
import { Image } from 'astro:assets';
import { BASE_URL } from '../../../../consts';
import nodejs入門 from './nodejs/img/nodejs入門.jpg';
import vue3 from './spa/img/vue3.jpg';
import vuejs入門 from './spa/img/vuejs入門.jpg';
import popularity_2006q4 from './img/popularity_2006q4.jpg';
import popularity_2025q1 from './img/popularity_2025q1.jpg';

const indexList = [
  { id: '#firstly', name: 'はじめに' },
  { id: '#history', name: '歴史' },
  { id: '#html5', name: 'HTML5' },
  { id: '#nodejs', name: 'Node.js' },
  { id: '#CJS_ES6', name: 'CJS, ES6' },
  { id: '#cjs', name: 'CJS' },
  { id: '#es6', name: 'ES6' },
  { id: '#altjs', name: 'AltJS' },
  { id: '#front', name: 'フロントエンドライブラリ' },
  { id: '#detail', name: '関連技術詳細' }
];
---
<SiteLayout
  title="JavaScriptの進化"
  description="JavaScriptという言語が生まれてから近年のSPA開発に至るまで"
  twitterCardSize={TWITTER_CARD_SUMMARY}
  indexList={indexList}
>

  <h2 class="title">JavaScriptの進化</h2>

  <ul class="breadcrumb">
    <li class="breadcrumbli"><a href={BASE_URL}>ホーム</a></li>
    <li class="breadcrumbli"> &gt; JavaScript</li>
  </ul>
  <br/>
  <span id="firstly"></span>
  <h3 class="title">はじめに</h3>
  <p>
    自分が入社した当時、プログラミング言語はJavaが主流で、殆どJava一強という時代でした。<br/>
    JavaScriptも人気のある言語ではあったのですが、UI周りをちょっと便利にするという使い方（ポップアップを出したり未入力項目を赤字にしたり）が多く、サーバーサイドで業務処理を実装する時にはJavaがよく使われるという時代でした。<br/>
    しかし最近では様相が変わっています。以下の画像と動画を見るとわかりますが、2006年頃は人気の言語1位常連だったJavaが、いつの間にか1位から転落。最近では「Javaは時代遅れ」等という声が聞こえてくることもあります（個人的には時代遅れは言い過ぎな気もしていますが）。最近（2024年3月現在）は、PythonやJavaScript等が人気の言語上位にランクインしているのをよく見かけるようになりました。<br/>
    <Image src={popularity_2006q4} width={500} alt="popularity_2006q4" />
    <Image src={popularity_2025q1} width={500} alt="popularity_2025q1" /><br/>
    ※画像は以下動画から抜粋。<br/>
  </p>
  <div class="youtube">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/ZTPrbAKmcdo?si=XkkOKSaf8_KVCcNJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
  </div>

  <br/>
  <p>
    Pythonは機械学習の分野で豊富なライブラリを提供しているから、AIの分野で現在人気なのはわかる。<br/>
    JavaScriptはなんで人気なのか？自分が入社した時代から何が変わったのか？そもそもJavaScriptってクライアントサイドで動いているものなのでは？？<br/>
    ぐらいの認識だったので、JavaScriptについて調べた上で、実際に物を作ってみました。<br/>
  </p>

  <br/>
  <span id="history"></span>
  <h3 class="title">JavaScriptの歴史</h3>
  <h4 class="title">JavaScriptの生まれ</h4>
  <p>
    まずJavaScriptの歴史から見ていきます。<br/>
    JavaScriptはWebブラウザNetscape Navigatorに起源を持つプログラミング言語です。1995年にネットスケープコミュニケーションズのブレンダン・アイクによって開発されました。<br/>
    JavaScriptの登場初期は、ブラウザベンダー間で言語仕様の独自拡張が行われていたため、ブラウザ間の互換性が極めて低かったが、1997年、JavaScriptの中核的な仕様がECMAScript（エクマスクリプト）として標準化され、多くのウェブブラウザで利用できるようになりました。ECMAScriptはEcmaインターナショナルにおいて標準化されたJavaScriptの国際規格です。<br/>
    しかし、この時代のフロントエンドに求められていたのはCSSによる装飾、JavaScriptによるアラートや入力受付程度のもので、現在のように様々な場面で使用されるような物ではありませんでした。しかし2005年を境にその状況は変わっていきます。<br/>
  </p>
  <h4 class="title">Ajaxの登場</h4>
  <p>
    2005年にGoogle社が地図サービスGoogleMapsをリリースして状況は一変します。<br/>
    GoogleMapsは当時としては革新的な、ページ遷移することなくWebブラウザ側で地図を拡大・縮小する機能を提供しました。Ajaxと呼ばれる、JavaScriptによってサーバーと非同期も通信する技術によって実現しています。同一ページ内でコンテンツが高速かつインタラクティブに動く、軽快なUXがAjaxによって提供されるようになります。<br/>
    Ajaxの衝撃以降、クライアントサイドではAjaxとそれを活用したDOM(※)の高度な操作が求められるようになります。それに応えるjQueryなどのライブラリが人気を集めました。<br/>
    サーバーサイドにおいては、Webサーバーは従来のHTMLレンダリングだけでなく、RESTfulをベースとしたWeb APIも提供するようになります。<br/>
    AjaxとWeb APIにより、よりリッチなWeb業務システムやWebサービスを構築するのが一般的になりました。Webブラウザ側でもJavaScriptを駆使して本格的なプログラムが書かれることになります。<br/>
    この頃から開発のサーバーサイド、クライアントサイドの分業化が見られるようになります。クライアントサイドはWebフロントエンドとして確立していくようになりました。<br/>
    <br/>
    ※DOM(Document Object Model)は、HTMLやXMLドキュメントなどのマークアップ言語とCSSをツリー構造で表現したデータモデルのことで、JavaScriptなどのプログラミングで操作することができる。<br/>
  </p>

  <h3 class="title">HTML5, Node.js, ES2015, AltJS, React以降の世界</h3>
  <p>
    00年代末から10年代にかけてWebはさらに複雑化、高度化していくことになります。HTML5, Node.js, ES2015, AltJS, Reactの4つの視点からその過程を見ていきましょう。<br/>
  </p>
  <span id="html5"></span>
  <h4 class="title">HTML5の登場とWebアプリケーションプラットフォーム化</h4>
  <p>
    HTML5は2014年に勧告された仕様です。HTMLの文書仕様だけでなく、Web全体の仕様をアップデートする大きな動きとなっていきました。<br/>
    HTML5では、Webをアプリケーションプラットフォームとしても機能させられるよう、HTML/CSSやDOM APIに強力な仕様変更が入れられました。<br/>
    その中でもHistory APIはこの後のWebアプリケーションの発展において特に重要なモノでした。History APIによって、ページの遷移をWebブラウザではなくJavaScriptでハンドリングできるようになりました。これによってコンテンツを画面遷移なしに、URLや履歴を管理しつつ切り替えるシングルページアプリケーションの構築が可能になりました。<br/>
    HTML5 の仕様策定には Apple, Mozilla, Opera というブラウザエンジンを開発している組織が関わっていました。このこともあり、これらのベンダがリリースするブラウザは標準に準拠しているのが当たり前という流れが出来上がっていきます。<br/>
    一方、この頃から、Webの標準に準拠していないIEの利用が避けられることが多くなりました。Microsoftもその状況に対応するために、標準への準拠を謳ったブラウザとして Edge を2015年にリリースします。<br/>
    この Edge, Chrome, Safari, Firefox といった、Web 標準に準拠したブラウザをモダンブラウザと言います。そして2010年後半には、モダンブラウザがシェアの殆どを占める状況になったおかげで、JavaScriptの仕様が、ECMAScriptへの準拠という形で標準化された状況が出来上がります。<br/>
    HTML5の登場とそれに伴うライブラリの進化、モダンブラウザの普及などにより、クライアントサイドにおいてもより強力な表現が可能となりました。<br/>
    これを受けて、プレゼンテーション層のプログラムがサーバーサイドからクライアントサイドにシフトしていきます。従来サーバーサイドで行っていたHTMLの描画が、Web APIで必要なデータを取得すればクライアントサイドで可能となったためです。こちらの方が画面遷移の少なさなどによって、より優れた体験を与えられます。<br/>
  </p>
  <span id="nodejs"></span>
  <h4 class="title">Node.jsによるJavaScriptエコシステムの進化</h4>
  <p>
    2009年にはNode.jsが登場します。Node.jsは、サーバーサイドでJavaScriptを使うためのプラットフォームですが、フロントエンドにも大きな2つの変化を与えます。<br/>
    1つは今までブラウザに閉じられていた実行環境が広く使えるようになったことです。<br/>
    もう1つはパッケージマネージャー、パッケージリポジトリであるnpm(Node Package Manager)の普及です。JavaScriptで実装されたライブラリを<a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">npm経由</a>で利用できるようになりました。これによってモジュール（パッケージ）を適切に利用し、開発したものをモジュール化してnpm経由で配布する文化が育ちます。サーバーサイド、クライアントサイド問わずJavaScriptアプリケーションはNode.jsを利用して開発し、npmを介して提供されるようになります。<br/>
    エコシステムが整備されたとこ、他にあげている同時期のWeb全体の躍進もあり、JavaScriptライブラリは活況を迎えます。ライブラリが多種多様に出現し、開発にそれらを用いることがWebフロントエンドエンジニアに求められるようになりました。<br/>
  </p>

  <span id="CJS_ES6"></span>
  <h4 class="title">JavaScriptの言語機能の進化（CommonJSとESモジュール）</h4>
  <p>
    Webフロントエンド開発が高度化するなかで問題になるのがJavaScriptの言語機能の貧弱さです。<br/>
    JavaScriptが抱えていた大きな問題の一つとして、他のJSファイルを取り込む標準的な仕様が存在しなかったということが挙げられます。<br/>
    分割したファイルや、外部JSファイルを読み込みたい場合、以下のようにHTMLファイルにscriptタグを書き込むことで別ファイルを読み込んでいました。<br/>
  </p>
  <pre><code>&lt;script src="js/aaa_1.js"&gt;&lt;/script&gt;  //  aaa.js を分割したファイル
&lt;script src="js/aaa_2.js"&gt;&lt;/script&gt;  //  aaa.js を分割したファイル
&lt;script src="js/aaa_3.js"&gt;&lt;/script&gt;  //  aaa.js を分割したファイル
&lt;script src="js/vender/hoge.js"&gt;&lt;/script&gt;
&lt;script src="js/vender/hoge-child.js"&gt;&lt;/script&gt; // hoge.js を前提に作られたファイル</code></pre>
  <p>
    このようにファイルが分割されていたり外部ファイルを読み込んでいる場合、単純に上から順にファイルの読み込みが行われますが、以下の問題点があります。<br/>
    <br/>
    問題点<br/>
    ① 命名の衝突をさける為の名前空間と呼ばれる概念がない<br/>
    →　変数名が被っていた場合、後から読み込んだファイルの変数名で上書きされてしまう。<br/>
    ② 依存関係を解決する仕組みがない<br/>
    →　あるファイルをもとに別のファイルが作られていた場合、一方を修正するともう一方の処理が想定どおりに動かなくなってしまう。<br/>
    <br/>
    こういった問題を解決するため、2009年にCommonJSと呼ばれるプロジェクトが発足し、モジュール化など、様々な仕様を定めました。また、2015年にもES2015（ES6とも言う）という仕様がECMAScriptによって定められます。<br/>
    CommonJSは元々、サーバーサイドにおけるJavaScriptの仕様を定めることを目標としたプロジェクトでした。このため、Node.jsで利用できますが、ブラウザでは使用できません。ES2015は両方で使用できます。<br/>
    Node.jsはデフォルトで全てのモジュールをCommonJSで扱います。ES2015で扱うようにするには、以下のいずれかの対応でモジュールシステムを変える必要があります。<br/>
  </p>
  <ol>
    <li>
      package.jsonに"type": "module"を追加する<br/>
      package.jsonは、Node.jsプロジェクトにおいて、そのプロジェクトの情報や依存関係、スクリプトなどの設定を記述するためのファイルです。
      <pre class="title" style="margin-left: 0rem"><code class="title">package.json</code></pre>
      <pre style="margin-left: 0rem"><code>{`{
  "type": "module",
  ...
}`}
</code></pre>
      デフォルトをES2015にしても、ファイルの拡張子を.cjsとすることでCommonJSとして扱うことができます。
    </li>
    <li>
      --input-type=moduleをつけて実行する<br/>
      <code>node main.js --input-type=module</code>
    </li>
    <li>拡張子を.mjsに変える</li>
  </ol>
  <p>
    今後ES2015に統一されていくと思われますが、現時点ではまだまだ統一されていない状況です（2024年3月現在）。<br/>
  </p>

  <span id="cjs"></span>
  <h4 class="title">CommonJSのモジュール機能</h4>
  <p>
    CommonJS に従って作られた新たなJavaScriptでは、 export, require という機能を使ってモジュールをimport/exportします。<br/>
    export について、モジュール側はmodule.exportsに関数やクラスなどを定義します。<br/>
  </p>
  <pre class="title"><code class="title">module.js</code></pre>
  <pre><code>{`module.exports = function() {
  console.log('Hello World！');
}`}
</code></pre>
  <p>
    読込む側は<code>require([ファイルパス])</code>で読み込みを行います。<br/>
  </p>
  <pre class="title"><code class="title">main.js</code></pre>
  <pre><code>const helloWorldModule = require('./module.js');
helloWorldModule();
// 出力：Hello World！
</code></pre>

  <br/>
  <span id="es6"></span>
  <h4 class="title">ES2015(ES6)によるプログラミング言語としての進化</h4>
  <p>
    ES2015はJavaScriptの歴史上でも最大のアップデートだと言われています。モジュールをimport/exportする機能や、constやletなどの様々な構文が増え、書き方も大々的に変わることになります。ここではモジュールとlet, constについてのみ言及します。<br/>
    <br/>
    ES2015では、同じ export でも CommonJS のものとは記法が違い、モジュール側では通常通り関数やクラスを定義し、頭にexportを付けます。<br/>
  </p>
  <pre class="title"><code class="title">module.js</code></pre>
  <pre><code>{`export const helloWorld = function() {
  console.log('Hello World！');
}`}
</code></pre>
  <p>
    読み込み側ではimport文を使って先ほどのモジュールを読み込みます。<br/>
  </p>
  <pre class="title"><code class="title">main.js</code></pre>
  <pre><code>{`import { helloWorld } from './module'
helloWorld();
// 出力：Hello World！
`}
</code></pre>

  <br/>
  <p>
    let と const は変数の宣言に使用する構文で、これまで使用されてきた var に変わるものです。var は以下に示すように、再宣言できるという問題がありました。<br/>
  </p>
  <pre class="title"><code class="title">varによる変数の宣言</code></pre>
  <pre><code>var name = 'soarflat';
console.log(name); // => soarflat

name = 'SoarFlat'; // 再代入する
console.log(name); // => SoarFlat

var name = 'SOARFLAT'; // 再宣言をする
console.log(name); // => SOARFLAT
</code></pre>
  <p>
    この問題を解決するために追加された機能が let です。let を使用した場合、同じ変数名を再宣言するとエラーになります。<br/>
  </p>
  <pre class="title"><code class="title">letによる変数の宣言</code></pre>
  <pre><code>let name = 'soarflat';
console.log(name); // => soarflat

name = 'SoarFlat'; // 再代入する
console.log(name); // => SoarFlat

let name = 'SOARFLAT'; // 再宣言するとエラーになる
</code></pre>
  <p>
    const は定数を宣言するためのもので、再宣言はもちろんのこと、再代入もできないようになっています。<br/>
  </p>
  <pre class="title"><code class="title">constによる変数の宣言</code></pre>
  <pre><code>const NAME = 'soarflat';
console.log(NAME); // => soarflat

NAME = 'SOARFLAT'; // 再代入するとエラーになる
</code></pre>

  <br/>
  <p>
    これ以外にも、Promise というオブジェクトと Async/await という構文が追加され、非同期処理を容易に扱えることができるようになるなど、様々な機能がES2015で追加されました。<br/>
  </p>

  <span id="altjs"></span>
  <h4 class="title">AltJSの登場</h4>
  <p>
    ES2015と前後してAltJS(Alternative JavaScript)と呼ばれるものが登場します。AltJSは、JavaScriptの代替として機能する多様なプログラミング言語群のことを指します。<br/>
    JavaScriptの弱点を補ったり、特定のニーズに特化したJavaScriptの代替言語として開発されました。<br/>
    より簡潔な構文を目指したCoffeeScriptや、型を注釈として付与するTypeScriptなどがあります。特にTypeScriptは現在の開発で広く使われるようになりつつあります。<br/>
  </p>

  <span id="front"></span>
  <h4 class="title">Reactをはじめとするフロントエンドライブラリの出現</h4>
  <p>
    ここまで紹介してきたように、フロントエンドを取り巻く仕様、技術は高度化しています。これらが可能になったことで、アプリケーション、サービスにおいても複雑な要件が求められるようになります。<br/>
    アプリケーションデータフローをフロントエンド側で受け持つなど、設計段階から難易度が上がり、MVCのようなアプリケーションの構造を持ったフレームワークが必要とされるようになります。React, Vue.js, Angular, Svelte などの新たなWebアプリケーションフレームワーク、ライブラリが次々と出現します。結果、高度なフロントエンドアプリケーションの開発はjQueryで無理矢理に作るよりも構造化しやすくなりました。<br/>
    SPA(Single Page Application)という新しいWebアプリケーションの構築手法も普及してきました。<br/>
    <br/>
    ここまでが、JavaScriptが生まれてから現在までの歴史になります。<br/>
    ここから先はNode.js, SPA（React, Next.jsとVue.js, Nuxt3）, AltJSの代表格であるTypeScriptについて見ていきます。<br/>
  </p>

  <span id="detail"></span>
  <h3 class="title">関連技術詳細</h3>
  <ul>
    <li>【工事中】jQuery</li>
    <li><a href=`${BASE_URL}/contents/development/javascript/nodejs/nodejs`>Node.js</a></li>
    <li><a href=`${BASE_URL}/contents/development/javascript/spa/spa`>SPA(Single Page Application)</a></li>
    <li><a href=`${BASE_URL}/contents/development/javascript/typescript`>TypeScript</a></li>
  </ul>
  <hr />

  <br/>
  参考書籍<br/>
  <ul>
    <li><a href="https://amzn.to/3x8wRfv" target="_blank" rel="noopener noreferrer"><Image src={nodejs入門} width={200} alt="nodejs入門" /><br/>Node.js入門</a></li>
    <li><a href="https://amzn.to/3x59PG9" target="_blank" rel="noopener noreferrer"><Image src={vue3} width={200} alt="vue3" /><br/>Vue 3　フロントエンド開発の教科書</a></li>
    <li><a href="https://amzn.to/4986MdE" target="_blank" rel="noopener noreferrer"><Image src={vuejs入門} width={200} alt="vuejs入門" /><br/>Vue.js入門 基礎から実践アプリケーション開発まで</a></li>
  </ul>
  参考サイト<br/>
  <ul>
    <li><a href="https://qiita.com/soarflat/items/b251caf9cb59b72beb9b" target="_blank" rel="noopener noreferrer">Qiita ES2015(ES6) 入門</a></li>
    <li><a href="https://thinkit.co.jp/article/10644" target="_blank" rel="noopener noreferrer">ThinkIT ES2015のモジュール管理</a></li>
    <li><a href="https://maru-note.net/entry/2023/01/28/185158" target="_blank" rel="noopener noreferrer">まるノート JavaScriptの歴史 ～CommonJSとES2015～</a></li>
    <li><a href="https://ics.media/entry/16511/" target="_blank" rel="noopener noreferrer">ICS MEDIA ES Modules入門 JavaScriptでモジュールを使う時代</a></li>
    <li><a href="https://zenn.dev/yodaka/articles/596f441acf1cf3" target="_blank" rel="noopener noreferrer">Zenn CommonJSとES Modulesについてまとめる</a></li>
    <li><a href="https://ja.wikipedia.org/wiki/CommonJS" target="_blank" rel="noopener noreferrer">wikipedia CommonJS</a></li>
    <li><a href="https://ja.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener noreferrer">wikipedia ECMAScript</a></li>
    <li><a href="https://hackmd.io/@iFxVSfmNQBi89A13TWdmpw/HJYvmQLQq" target="_blank" rel="noopener noreferrer">HackMD common.js と ECMAScript の違いについて</a></li>
    <li><a href="https://next-code.jp/blog/tech/javascript/javascript%E3%81%AB%E7%A8%AE%E9%A1%9E%EF%BC%9Fcommonjs%E3%81%A8ecmascript/" target="_blank" rel="noopener noreferrer">株式会社NextCode JavaScriptに種類？CommonJSとECMAScript</a></li>
    <li><a href="https://engineer-style.jp/articles/9878" target="_blank" rel="noopener noreferrer">エンジニアスタイル altJS(代替JavaScript言語)とは？種類と選び方を紹介</a></li>
    <li><a href="https://ja.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener noreferrer">wikipedia JavaScript</a></li>
    <li><a href="https://ja.wikipedia.org/wiki/Document_Object_Model" target="_blank" rel="noopener noreferrer">wikipedia Document Object Model</a></li>
    <li><a href="https://developer.mozilla.org/ja/docs/Web/API/Document_Object_Model" target="_blank" rel="noopener noreferrer">Mmdn web docs ドキュメントオブジェクトモデル (DOM)</a></li>
    <li><a href="https://developer.mozilla.org/ja/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener noreferrer">Mmdn web docsUdemy DOM の紹介</a></li>
    <li><a href="https://udemy.benesse.co.jp/development/dom.html" target="_blank" rel="noopener noreferrer">Udemy メディア DOMとは？仕組みや構造を解説！HTMLやJavaScriptとの関係は？</a></li>
    <li><a href="https://prog-8.com/docs/dom" target="_blank" rel="noopener noreferrer">DOMとは</a></li>
    <li><a href="https://www.codegrid.net/articles/2015-es6-1/" target="_blank" rel="noopener noreferrer">CodeGrid ECMAScript 2015の新機能 第1回 Promise 1</a></li>
    <li><a href="https://thinkit.co.jp/article/10625" target="_blank" rel="noopener noreferrer">ThinkIT ES2015が備えるモダンな非同期処理</a></li>
    <li><a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">npm</a></li>
  </ul>
</SiteLayout>
