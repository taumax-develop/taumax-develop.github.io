---
import SiteLayout from '../../../../../layouts/SiteLayout.astro';
import { Image } from 'astro:assets';
import { TWITTER_CARD_SUMMARY } from '../../../../../components/BaseHead.astro';
import aaa from './img/aaa.png'
import bbb from './img/bbb.png'
import ccc from './img/ccc.png'
import ddd from './img/ddd.png'
import eee from './img/eee.png'
import fff from './img/fff.png'
import ggg from './img/ggg.png'
import { BASE_URL } from '../../../../../consts';

const indexList = [
  { text: 'Home', href: '/' },
  { text: 'Java', href: '/contents/development/java/java' },
  { text: 'Java 14', href: '/contents/development/java/java_lang/java14_new_funcs' }
];
---
<SiteLayout
  title='Java 14で最低限押さえておきたい新機能をEclipseで使ってみた'
  description='Java 14の新機能をEclipseで試す手順とサンプルコード解説'
  twitterCardSize={TWITTER_CARD_SUMMARY}
  indexList={indexList}>
  <h1>Java 14で最低限押さえておきたい新機能をEclipseで使ってみた</h1>
  <p><a href={BASE_URL}>ホーム</a> &gt; <a href=`${BASE_URL}/contents/java`>Java</a> &gt; Java 14</p>
  <h2>はじめに</h2>
  <p>2020/3/17にJava 14がリリースされました。以下の機能が追加されたようです。下の表の「本記事の対象」列に〇がついているものを少し触ってみたので後で紹介します。</p>
  <table>
    <thead>
      <tr><th>JEP（※1）</th><th>概要</th><th>本記事の対象</th></tr>
    </thead>
    <tbody>
      <tr><td><a href="https://openjdk.java.net/jeps/305" target="_blank" rel="noopener noreferrer">305</a></td><td>Pattern Matching for instanceof (Preview)</td><td>〇</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/343" target="_blank" rel="noopener noreferrer">343</a></td><td>Packaging Tool (Incubator)</td><td>×</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/345" target="_blank" rel="noopener noreferrer">345</a></td><td>NUMA-Aware Memory Allocation for G1</td><td>×</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/349" target="_blank" rel="noopener noreferrer">349</a></td><td>JFR Event Streaming</td><td>×</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/352" target="_blank" rel="noopener noreferrer">352</a></td><td>Non-Volatile Mapped Byte Buffers</td><td>×</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/358" target="_blank" rel="noopener noreferrer">358</a></td><td>Helpful NullPointerExceptions</td><td>〇</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/359" target="_blank" rel="noopener noreferrer">359</a></td><td>Records (Preview)</td><td>〇</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/361" target="_blank" rel="noopener noreferrer">361</a></td><td>Switch Expressions (Standard)</td><td>〇</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/362" target="_blank" rel="noopener noreferrer">362</a></td><td>Deprecate the Solaris and SPARC Ports</td><td>×</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/363" target="_blank" rel="noopener noreferrer">363</a></td><td>Remove the Concurrent Mark Sweep (CMS) Garbage Collector</td><td>×</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/364" target="_blank" rel="noopener noreferrer">364</a></td><td>ZGC on macOS</td><td>×</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/365" target="_blank" rel="noopener noreferrer">365</a></td><td>ZGC on Windows</td><td>×</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/366" target="_blank" rel="noopener noreferrer">366</a></td><td>Deprecate the ParallelScavenge + SerialOld GC Combination</td><td>×</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/367" target="_blank" rel="noopener noreferrer">367</a></td><td>Remove the Pack200 Tools and API</td><td>×</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/368" target="_blank" rel="noopener noreferrer">368</a></td><td>Text Blocks (Second Preview)</td><td>〇</td></tr>
      <tr><td><a href="https://openjdk.java.net/jeps/370" target="_blank" rel="noopener noreferrer">370</a></td><td>Foreign-Memory Access API (Incubator)</td><td>×</td></tr>
    </tbody>
  </table>
  <p>公式は<a href="https://openjdk.java.net/projects/jdk/14/">こちら</a></p>
  <p>※1 JEP
JDK Enhancement Proposalsの略。
JDKに対する変更の提案を管理する番号。</p>
<p>参考：https://www.slideshare.net/AyaEbata/jsrjepjbs
JEPの目次：https://openjdk.java.net/jeps/0</p>
<p>※2 <a href="https://openjdk.java.net/jeps/12">Preview</a>
プレビュー版のこと。
機能としては保証されているが、どのように使うべきかは議論の余地があるもの。開発者が実際に使ってみて、フィードバックを受けて今後もJava SEの基本機能として提供し続けるかどうかが決まる。</p>
<p>※3 <a href="https://openjdk.java.net/jeps/11">Incubator</a>
開発者からのフィードバックを得るために、Java SEに含めた実験的なAPI。</p>
<p>参考：https://xtech.nikkei.com/it/atcl/column/15/120700278/080700044/</p>
<h1>Java 14をEclipseで使えるようにするための設定</h1>
<p>私はEclipse使いなので、JDK 14のインストールとEclipseの設定から始めます。</p>
<h2>JDKダウンロード</h2>
<p>以下のサイトからJDK14をダウンロードします。
https://www.oracle.com/java/technologies/javase-downloads.html</p>
<h2>Eclipseインストール</h2>
<p>Eclipseの最新版をインストールします。
https://www.eclipse.org/eclipseide/</p>
<h2>EclipseでJDK14を扱えるようにする</h2>
<p>EclipseでJDK14を扱えるようにする手順は以下の通り。</p>
<p>①Eclipse Marketplaceを選択
<Image src={aaa} width={500} alt="Eclipse Marketplaceを選択"></p>
<p>②Java 14 Support for Eclipse をインストール
<Image src={bbb} width=400 alt="Java 14 Support for Eclipse をインストール"></p>
<p>※こういったEclipse本体やプラグインのリリース情報は公式のtwitterからも流れてくるので興味ある方はフォローすることをお勧めします。</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">🌟 Here is the new me! Eclipse IDE 2020-03! 🌟<br><br>Many improvements for users to leverage in many places<br>📰 <a href="https://t.co/tEp3O53CvA">https://t.co/tEp3O53CvA</a> and <a href="https://t.co/lQsBQecjUb">https://t.co/lQsBQecjUb</a> !<br><br>☕ Support for JDK 14 is also released today, at <a href="https://t.co/bqDu2awnjL">https://t.co/bqDu2awnjL</a><br><br>🙏 Thanks to my contributors!</p>&mdash; 🌒 Eclipse Java IDE (@EclipseJavaIDE) <a href="https://twitter.com/EclipseJavaIDE/status/1240287756586278912?ref_src=twsrc%5Etfw">March 18, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p><br></p>
<p>③Compiler compliance levelを14に設定
※Java 14 Support for Eclipse をインストールしないと14が選択肢に出ません。
<Image src={ccc} width={500} alt="ccc"></p>
<p>④Installed JREに、インストールしたJDK14を設定
<Image src={ddd} width={500} alt="ddd"></p>
<p>⑤Execution emvironmentにJDK14を設定
<Image src={eee} width={500} alt="eee"></p>
<p>⑥今回はプレビューの機能も使うので、プレビューを有効化します。
<Image src={fff} width={500} alt="fff"></p>
<p>これでJava 14を使ったJavaアプリケーションをEclipseで開発・実行できるようになります。</p>
<h1>Java 14の新機能を触ってみる</h1>
<p>早速触ってみました。</p>
<h2><a href="https://openjdk.java.net/jeps/305">JEP 305：Pattern Matching for instanceof (Preview)</a></h2>
<p>まずはJEP 305のPattern Matching for instanceofです。
instanceof と同時に変数を定義できるようになりました。
実際の書き方の例は以下の通りです。
前半がこれまでの書き方、後半がPattern Matching for instanceofを使用した書き方になっています。</p>
<p>まずはこれまでの書き方。</p>
<pre><code class="java:NotPatternMatchingTest.java language-java:NotPatternMatchingTest.java">{`public class NotPatternMatchingTest {
    public static void main(String... args) {
        patternMatch("literal");
        patternMatch(1);

    }

    private static void patternMatch(Object obj) {
        // これまでの書き方
        if (obj instanceof String) {
            String str = (String) obj;
            System.out.println("No Pattern Matching:" + str);
        } else if (obj instanceof Integer) {
            Integer inte = (Integer) obj;
            System.out.println("No Pattern Matching:" + inte);
        }
    }
}`}</code></pre>
<p>これがPattern Matching for instanceof を使用した書き方。</p>
<pre><code class="java:PatternMatchingTest.java language-java:PatternMatchingTest.java">{`public class PatternMatchingTest {
    public static void main(String... args) {
        patternMatch("literal");
        patternMatch(1);
    }

    // previewなのでSuppressWarningsでワーニング抑止
    @SuppressWarnings("preview")
    private static void patternMatch(Object obj) {
        // Pattern Matching for instanceof
        if (obj instanceof String str) {
            System.out.println("Pattern Matching:" + str);
        } else if (obj instanceof Integer inte) {
            System.out.println("Pattern Matching:" + inte);
        }
    }
}`}</code></pre>
<p>switch文での使用はJava 15以降に持ち越しになっているようです。
http://openjdk.java.net/jeps/8213076</p>
<h2><a href="https://openjdk.java.net/jeps/358">JEP 358：Helpful NullPointerExceptions</a></h2>
<p>NullPointerExceptionが発生した場合のメッセージが詳細になり、原因を特定しやすくなりました。
<code>-XX:+ShowCodeDetailsInExceptionMessages</code>オプションをつけて実行することで、詳細なメッセージを得ることができます。
以下のサンプルコードで実験してみました。</p>
<pre><code class="java:HelpfulNullPo.java language-java:HelpfulNullPo.java">{`public class HelpfulNullPo {
    public static void main(String... args) {
        String str = null;
        str.length();
    }
}`}</code></pre>
<p><code>-XX:+ShowCodeDetailsInExceptionMessages</code>オプションを付けずに実行した結果がこちら。</p>
<pre><code class=":実行結果（オプションなし） language-:実行結果（オプションなし）">Exception in thread "main" java.lang.NullPointerException
    at test.HelpfulNullPo.main(HelpfulNullPo.java:6)</code></pre>
<p><code>-XX:+ShowCodeDetailsInExceptionMessages</code>オプションをつけて実行した結果がこちら。</p>
<p><Image src={ggg} width={500} alt="ggg"></p>
<pre><code class=":実行結果（オプション有） language-:実行結果（オプション有）">Exception in thread "main" java.lang.NullPointerException: Cannot invoke "String.length()" because "str" is null
    at test.HelpfulNullPo.main(HelpfulNullPo.java:6)</code></pre>
<p>NullPointerExceptionの原因特定がしやすくなっています。</p>
<p>なお、JShellの場合は<code>-R-XX:+ShowCodeDetailsInExceptionMessages</code>という指定になります。</p>
<h2><a href="https://openjdk.java.net/jeps/359">JEP 359：Records (Preview)</a></h2>
<p>データ保持用のクラスとしてrecordという機能がpreviewとして入りました。
以下のように書くだけでデータ保持用のクラスを作ることができます。
（<code>record Person(String name, int age) {}</code>の部分）</p>
<pre><code class="java:RecordTest.java language-java:RecordTest.java">{`@SuppressWarnings("preview")
record Person(String name, int age) {}

public class RecordTest {
    public static void main(String... args) {
        Person person = new Person("taumax", 13);
        System.out.println("name:" + person.name());
        System.out.println("age:" + person.age());
        System.out.println(person);
    }
}`}</code></pre>
<pre><code class=":実行結果 language-:実行結果">name:taumax
age:13
Person[name=taumax, age=13]</code></pre>
<p>インスタンス生成後に値を変更することはできないようです。
厳密には違いますが、イメージ的にはイミュータブルなJavaBeansを簡単に作ることができるようになったという感覚ですかね。</p>
<h2><a href="https://openjdk.java.net/jeps/361">JEP 361：Switch Expressions (Standard)</a></h2>
<p>Switch文がアロー<code>-&gt;</code>を使って書けるようになり、かなり読みやすくなりました。また、breakの記載も不要になっています。
Switch ExpressionsはJava 12でプレビューとして導入されたものですが、今回のJava 14で正式機能として導入されます。
実際の書き方の例は以下の通りです。
前半がこれまでの書き方、後半がSwitch Expressionsを使用した書き方になっています。</p>
<p>まずはこれまでのswitch文</p>
<pre><code class="java:OldSwitchExpressions language-java:OldSwitchExpressions">{`public class OldSwitchExpressions {
    public static void main(String... args) {
        for (Week day : Week.values()) {
            oldSwitch1(day);
        }
    }

    // これまでのswitch文
    private static void oldSwitch1(Week day) {
        System.out.print("old:");
        switch (day) {
            case MONDAY, FRIDAY, SUNDAY:
                System.out.println(6);
                break;
            case TUESDAY:
                System.out.println(7);
                break;
            case THURSDAY, SATURDAY:
                System.out.println(8);
                break;
            case WEDNESDAY:
                System.out.println(9);
                break;
        }
    }

    private enum Week {
        SUNDAY, MONDAY, TUESDAY, WEDNESDAY,
        THURSDAY, FRIDAY, SATURDAY
    }
}`}</code></pre>
<p>これがSwitch Expressions</p>
<pre><code class="java:SwitchExpressions language-java:SwitchExpressions">{`public class SwitchExpressions {
    public static void main(String... args) {
        for (Week day : Week.values()) {
            newSwitch1(day);
        }
    }

    // 新しいswitch文
    private static void newSwitch1(Week day) {
        System.out.print("new:");
        switch (day) {
            case MONDAY, FRIDAY, SUNDAY -&gt; System.out.println(6);
            case TUESDAY                -&gt; System.out.println(7);
            case THURSDAY, SATURDAY     -&gt; System.out.println(8);
            case WEDNESDAY              -&gt; System.out.println(9);
        }
    }

    private enum Week {
        SUNDAY, MONDAY, TUESDAY, WEDNESDAY,
        THURSDAY, FRIDAY, SATURDAY
    }
}`}</code></pre>
<p>アロー<code>-&gt;</code>を使い、breakがなくなったことでかなり可読性が高くなったことがわかります。</p>
<p>また、switch文の実行結果をそのまま変数に代入することができるようになりました。
実際の書き方の例は以下の通りです。
前半がこれまでの書き方、後半がSwitch Expressionsを使用した書き方になっています。</p>
<pre><code class="java:OldSwitchExpressions2 language-java:OldSwitchExpressions2">{`public class OldSwitchExpressions2 {
    public static void main(String... args) {
        for (Week day : Week.values()) {
            oldSwitch2(day);
        }
    }

    // これまでのswitch文
    private static void oldSwitch2(Week day) {
        System.out.print("old:");
        int numLetters;
        switch (day) {
            case MONDAY, FRIDAY, SUNDAY:
                numLetters = 6;
                break;
            case TUESDAY:
                numLetters = 7;
                break;
            case THURSDAY, SATURDAY:
                numLetters = 8;
                break;
            case WEDNESDAY:
                numLetters = 9;
                break;
            default:
                throw new IllegalStateException("Wat: " + day);
        }
        System.out.println(numLetters);
    }

    private enum Week {
        SUNDAY, MONDAY, TUESDAY, WEDNESDAY,  
        THURSDAY, FRIDAY, SATURDAY
    }
}`}</code></pre>
<p>これがSwitch Expressionsを使用した書き方。</p>
<pre><code class="java:SwitchExpressions2 language-java:SwitchExpressions2">{`public class SwitchExpressions2 {
    public static void main(String... args) {
        for (Week day : Week.values()) {
            newSwitch2(day);
        }
    }

    // 新しいswitch文
    private static void newSwitch2(Week day) {
        System.out.print("new:");
        int numLetters = switch (day) {
            case MONDAY, FRIDAY, SUNDAY -&gt; 6;
            case TUESDAY                -&gt; 7;
            case THURSDAY, SATURDAY     -&gt; 8;
            case WEDNESDAY              -&gt; 9;
        };
        System.out.println(numLetters);
    }

    private enum Week {
        SUNDAY, MONDAY, TUESDAY, WEDNESDAY,  
        THURSDAY, FRIDAY, SATURDAY
    }
}`}</code></pre>
<p>これの効果は一目瞭然ですね。素らしい！</p>
<h2><a href="https://openjdk.java.net/jeps/368">JEP 368：Text Blocks (Second Preview)</a></h2>
<p>改行などを含んだ文字列を定義できるようになりました。
文字列を定義する場合の<code>"</code>ではなく<code>"""</code>で囲みます。
開始の<code>"""</code>のあとには文字列を続けることができません。</p>
<pre><code class="java:TextBlocks language-java:TextBlocks">{`public class TextBlocks {
    @SuppressWarnings("preview")
    public static void main(String... args) {
        // これまでは改行をエスケープする必要があった。
        String str1 = "I have a pen.\n"
                + "I don't have a pen.";
        System.out.println(str1);

        // エスケープしなくても改行してくれる。
        String str2 = """
                I have a pen.
                I don't have a pen.
                """;
        System.out.println(str2);

        // 改行したくない場合は「\」を付ける。
        String str3 = """
                I have a pen.\
                I don't have a pen.\
                """;
        System.out.println(str3);

        // 文字列に変数を埋め込む場合
        String str4 = """
                Hello %s.
                """.formatted("taumax");
        System.out.println(str4);
    }
}`}</code></pre>
<pre><code class=":実行結果 language-:実行結果">I have a pen.
I don't have a pen.

I have a pen.
I don't have a pen.


I have a pen.I don't have a pen.

Hello taumax.</code></pre>
<p>以上。</p>
  <h2>参考</h2>
  <ul>
    <li><a href="https://forest.watch.impress.co.jp/docs/news/1241637.html">Oracle、「Java 14」を発表 ～Recordクラスがプレビュー導入、switch式が正式機能に</a></li>
    <li><a href="https://news.mynavi.jp/article/20200320-999787/">Java 14がリリース</a></li>
    <li><a href="https://openjdk.java.net/projects/jdk/14/">OpenJDK 14公式</a></li>
  </ul>
</SiteLayout>
