---
import SiteLayout from '../../../../../../layouts/SiteLayout.astro';
import { BASE_URL, TWITTER_CARD_SUMMARY } from '../../../../../../consts';

const indexList = [
  { id: '#pagetop', name: 'ページトップ' },
  { id: '#organizingdata', name: 'Organizing Data' },
  { id: '#replacetypecodewithsubclasses', name: 'Replace Type Code with Subclasses' }
];
---

<SiteLayout title="Replace Type Code with Subclasses | リファクタリング技法" indexList={indexList} twitterCardSize={TWITTER_CARD_SUMMARY}>
  <h2 class="title">リファクタリング技法</h2>
  <p>ここでは<a href=`${BASE_URL}/contents/codesmell/Codesmells`>Code Smell</a>を解消するために参考となるリファクタリング技法や、その他参考になりそうな概念を紹介していこうと思います。</p>
  <p>リファクタリングに関してはこの辺りの書籍が参考になると思います。</p>
  <br/>
  リファクタリング第2版<br/>
  <a target="_blank" href="https://amzn.to/4m4SktG" rel="noopener noreferrer"><img src="../../../../../img/refactoring.jpg" alt="refactoring" /></a>
  <br/>
  レガシーコード改善ガイド<br/>
  <a target="_blank" href="https://amzn.to/44SixVn" rel="noopener noreferrer"><img src="../../../../../img/legacy_code.jpg" alt="legacy_code" /></a>

  <h1>関連するリファクタリング技法</h1>

  <h1 id="organizingdata">Organizing Data</h1>
  <p><a href="https://sourcemaking.com/refactoring/organizing-data">Organizing Data</a></p>

  <h2 id="replacetypecodewithsubclasses">Replace Type Code with Subclasses</h2>
  <p><a href="https://sourcemaking.com/refactoring/replace-type-code-with-subclasses">Replace Type Code with Subclasses</a>
    プログラムの振る舞いに直接影響を与えるType Codeが存在する場合、各値をサブクラスとして切り出し、関連する振る舞いをサブクラスに移動します。そして、条件分岐などでコントロールしていた部分をポリモルフィズムで実現するように書き換えましょう。</p>
  <p><strong><em>関連するCode Smell</em></strong></p>
  <ul>
    <li><a href="https://qiita.com/taumax/items/f192b16676f78fa04849#primitive-obsession">Primitive Obsession</a></li>
    <li><a href="https://qiita.com/taumax/items/f192b16676f78fa04849#switch-statements">Switch Statements</a></li>
  </ul>
</SiteLayout>
