---
import SiteLayout from '../../../../../../layouts/SiteLayout.astro';
import { BASE_URL, TWITTER_CARD_SUMMARY } from '../../../../../../consts';
import { Image } from 'astro:assets';
import refactoring from '../../../img/refactoring.jpg';
import legacy_code from '../../../img/legacy_code.jpg';

const indexList = [
  { id: '#pagetop', name: 'ページトップ' },
  { id: '#organizingdata', name: 'Organizing Data' },
  { id: '#encapsulatefield', name: 'Encapsulate Field' }
];
---

<SiteLayout title="Encapsulate Field | リファクタリング技法" indexList={indexList} twitterCardSize={TWITTER_CARD_SUMMARY}>
  <h2 class="title">リファクタリング技法</h2>
  <p>ここでは<a href=`${BASE_URL}/contents/development/codesmell/Codesmells`>Code Smell</a>を解消するために参考となるリファクタリング技法や、その他参考になりそうな概念を紹介していこうと思います。</p>
  <p>リファクタリングに関してはこの辺りの書籍が参考になると思います。</p>
  <br/>
  リファクタリング第2版<br/>
  <a target="_blank" href="https://amzn.to/4m4SktG" rel="noopener noreferrer"><Image src={refactoring} alt="refactoring" /></a>
  <br/>
  レガシーコード改善ガイド<br/>
  <a target="_blank" href="https://amzn.to/44SixVn" rel="noopener noreferrer"><Image src={legacy_code} alt="legacy_code" /></a>

  <h1>関連するリファクタリング技法</h1>

  <h1 id="organizingdata">Organizing Data</h1>
  <p><a href="https://sourcemaking.com/refactoring/organizing-data" target="_blank" rel="noopener noreferrer">Organizing Data</a></p>

  <h2 id="encapsulatefield">Encapsulate Field</h2>
  <p><a href="https://sourcemaking.com/refactoring/encapsulate-field" target="_blank" rel="noopener noreferrer">Encapsulate Field</a>
  publicなフィールドはprivateに変更してsetter/getterからのアクセスのみを許可するようにしましょう。
  カプセル化はオブジェクト指向の基本です。
  データに対して必要な処理（値のチェックなど）をsetter/getterに任せることで、データを利用する側ではその正当性を意識する必要がなくなります。</p>
  <p><strong><em>関連するCode Smell</em></strong></p>
  <ul>
    <li><a href="https://qiita.com/taumax/items/f192b16676f78fa04849#data-class" target="_blank" rel="noopener noreferrer">Data Class</a></li>
  </ul>
</SiteLayout>
