---
import SiteLayout from '../../../../../../layouts/SiteLayout.astro';
import { TWITTER_CARD_SUMMARY } from '../../../../../../consts';

const indexList = [
  { id: '#pagetop', name: 'ページトップ' },
  { id: '#organizingdata', name: 'Organizing Data' },
  { id: '#replacearraywithobject', name: 'Replace Array with Object' }
];
---

<SiteLayout title="Replace Array with Object | リファクタリング技法" indexList={indexList} twitterCardSize={TWITTER_CARD_SUMMARY}>
  <h2 class="title">リファクタリング技法</h2>
  <p>ここでは<a href="../codesmell/Codesmells">Code Smell</a>を解消するために参考となるリファクタリング技法や、その他参考になりそうな概念を紹介していこうと思います。</p>
  <p>リファクタリングに関してはこの辺りの書籍が参考になると思います。</p>
  <br />
  リファクタリング第2版<br />
  <a target="_blank" href="https://amzn.to/4m4SktG" rel="noopener noreferrer"><img src="../../../../../img/refactoring.jpg" alt="refactoring" /></a>
  <br />
  レガシーコード改善ガイド<br />
  <a target="_blank" href="https://amzn.to/44SixVn" rel="noopener noreferrer"><img src="../../../../../img/legacy_code.jpg" alt="legacy_code" /></a>

  <h1>関連するリファクタリング技法</h1>

  <h1 id="organizingdata">Organizing Data</h1>
  <p><a href="https://sourcemaking.com/refactoring/organizing-data">Organizing Data</a></p>

  <h2 id="replacearraywithobject">Replace Array with Object</h2>
  <p><a href="https://sourcemaking.com/refactoring/replace-array-with-object">Replace Array with Object</a>：
  様々なデータ型が1つの配列に含まれている場合、配列をオブジェクトに変換し、型が異なるデータは別のフィールドに持たせましょう。</p>
  <pre><code class="language-java">String[] row = new String[2];
row[0] = "Liverpool";
row[1] = "15";
</code></pre>
  <pre><code class="language-java">Performance row = new Performance();
row.setName("Liverpool");
row.setWins("15");
</code></pre>
  <p><strong><em>関連するCode Smell</em></strong></p>
  <ul>
    <li><a href="https://qiita.com/taumax/items/f192b16676f78fa04849#primitive-obsession">Primitive Obsession</a></li>
  </ul>
</SiteLayout>
