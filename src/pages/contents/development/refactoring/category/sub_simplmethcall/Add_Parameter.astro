---
import SiteLayout from '../../../../../../layouts/SiteLayout.astro';
import type { index } from '../../../../../../components/HeaderIndex.astro';
import { BASE_URL, TWITTER_CARD_SUMMARY } from '../../../../../../consts';
import { Image } from 'astro:assets';
import refactoring from '../../../img/refactoring.jpg';
import legacy_code from '../../../img/legacy_code.jpg';

const indexList: index[] = [
  { id: '#pagetop', name: 'ページトップ' },
  { id: '#simplifyingmethodcalls', name: 'Simplifying Method Calls' },
  { id: '#addparameter', name: 'Add Parameter' }
];
---

<SiteLayout title="Add Parameter | リファクタリング技法" indexList={indexList} twitterCardSize={TWITTER_CARD_SUMMARY}>
  <h2 class="title">リファクタリング技法</h2>
  <p>ここでは<a href=`${BASE_URL}/contents/development/codesmell/Codesmells`>Code Smell</a>を解消するために参考となるリファクタリング技法や、その他参考になりそうな概念を紹介していこうと思います。</p>
  <p>リファクタリングに関してはこの辺りの書籍が参考になると思います。</p>
  <br/>
  リファクタリング第2版<br/>
  <a target="_blank" href="https://amzn.to/4m4SktG" rel="noopener noreferrer"><Image src={refactoring} alt="refactoring" /></a>
  <br/>
  レガシーコード改善ガイド<br/>
  <a target="_blank" href="https://amzn.to/44SixVn" rel="noopener noreferrer"><Image src={legacy_code} alt="legacy_code" /></a>

  <h1>関連するリファクタリング技法</h1>

  <h1 id="simplifyingmethodcalls">Simplifying Method Calls</h1>
  <p><a href="https://sourcemaking.com/refactoring/simplifying-method-calls" target="_blank" rel="noopener noreferrer">Simplifying Method Calls</a></p>

  <h2 id="addparameter">Add Parameter</h2>
  <p><a href="https://sourcemaking.com/refactoring/add-parameter" target="_blank" rel="noopener noreferrer">Add Parameter</a>
    処理を行うのに必要なデータが足りない場合は引数で渡すようにしましょう。</p>
  <p><strong><em>関連するCode Smell</em></strong></p>
  <ul>
    <li><a href="https://qiita.com/taumax/items/f192b16676f78fa04849#alternative-classes-with-different-interfaces" target="_blank" rel="noopener noreferrer">Alternative Classes with Different Interfaces</a></li>
  </ul>
</SiteLayout>
