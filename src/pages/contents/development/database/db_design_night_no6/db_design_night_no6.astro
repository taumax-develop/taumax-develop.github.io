---
import SiteLayout from '../../../../../layouts/SiteLayout.astro';
import { TWITTER_CARD_SUMMARY } from '../../../../../components/BaseHead.astro';
import type { index } from '../../../../../components/HeaderIndex.astro';
import { Image } from 'astro:assets';
import seikika_01 from './img/seikika/seikika_01.png';
import seikika_02 from './img/seikika/seikika_02.png';
import seikika_03 from './img/seikika/seikika_03.png';
import seikika_04 from './img/seikika/seikika_04.png';
import seikika_05 from './img/seikika/seikika_05.png';
import seikika_06 from './img/seikika/seikika_06.png';
import about_null_05 from './img/about_null/about_null_05.png';
import about_null_06 from './img/about_null/about_null_06.png';
import about_null_07 from './img/about_null/about_null_07.png';
import about_null_08 from './img/about_null/about_null_08.png';
import about_null_09 from './img/about_null/about_null_09.png';
import about_null_10 from './img/about_null/about_null_10.png';
import about_null_11 from './img/about_null/about_null_11.png';
import tatsujin_db from './img/tatsujin_db.jpg';
import erd_lesson from './img/erd_lesson.jpg';
import sql_anti_pattern from './img/sql_anti_pattern.jpg';
import { BASE_URL } from '../../../../../consts';

const indexList: index[] = [
  { id: '#just_normalization', name: 'ちょうどいい正規化の話' },
  { id: '#db_fail_design', name: '申込におけるDB設計の失敗とたられば' },
  { id: '#dislike_null', name: 'NULL嫌いのUPDATEしないDB設計' },
];
---
<SiteLayout
  title="DB設計したいNight #6 正規化 [online]"
  description="2020/6/4に開催された「DB設計したいNight #6 正規化 [online]」というイベントのまとめ"
  twitterCardSize={TWITTER_CARD_SUMMARY}
  indexList={indexList}
>

  <h2 class="title">DB設計したいNight #6 正規化 [online]</h2>

  <a href={BASE_URL}>ホーム</a> > <a href=`${BASE_URL}/contents/development/database/database`>Database関連</a> > DB設計したいNight #6 正規化<br><br>

  <p>
    2020/6/4に「DB設計したいNight #6 正規化 [online]」というイベントが開催されました。<br>
    <a href="https://dbnight.connpass.com/event/177859/?utm_campaign=event_participate_to_follower&utm_source=notifications&utm_medium=twitter" target="_blank">
      conpassのリンク
    </a><br>
    発表資料はほぼ公開されているのですが、twitterでも発表者以外の知見・知識がいろいろ展開されていたりします。<br>
    公開された資料とtwitterの呟きをまとめて閲覧できるようにすることで、知識の幅を広げたり、より体系だったものとして整理できるのではないかという考えでこの記事を書きました。<br>
    twitterまとめ自体は<a href="https://togetter.com/li/1535793" target="_blank">ここにも</a>あるのでご活用いただければ幸いです。
  </p>

  <span id="just_normalization"></span>
  <h2 class="title">ちょうどいい正規化の話</h2>
  <p>
    <a href="https://twitter.com/nakunaru" target="_blank">Nakunaru</a>さんの発表
  </p>

  <br>
  <h3 class="title">発表資料</h3>
  <p>
    資料は<a href="https://docs.google.com/presentation/d/1gol4Kh1GqrubxmKdG66R9uKNU0m_Y1F0_kMnk3M0q_Y/edit?usp=sharing" target="_blank">ここ</a>
  </p>

  <br>
  <h3 class="title">発表内容とtwitterの反応</h3>
  <p>
    <ul style="list-style-type: circle;">
      <li>
        『ちょうどいい正規化の話』<br>
        スキーマ設計の勘所がわかりやすく説明されていてよいな。初心者にお薦めだ。
      </li>
    </ul>
  </p>

  <br>
  <h4 class="title">「ちょうどいい」って</h4>
  <p>
  <Image src={seikika_01} alt='seikika_01' >
    <ul style="list-style-type: circle;">
      <li>まず不整合を起こさせないこと</li>
      <li>不整合を起こさない。データを失わない</li>
    </ul>
  </p>

  <h4 class="title">ちょうどいい正規化　3か条</h4>
  <p>
    <Image src={seikika_02} alt='seikika_02' /><br>
    <ul style="list-style-type: circle;">
      <li>
        ・ダブらせない<br>
        ・ロストしない<br>
        ・主キーに仕事をさせる<br>
        主キーが仕事できていない箇所はないか、と見ると正規化できていないところが見えてくる。<br>
      </li>
      <li>
        正規化三箇条<br>
        ・だぶらせない<br>
        ・ロストしない<br>
        ・主キーに仕事をさせる<br>
      </li>
      <li>
        2. ロストしない<br>
          -> 「そのテーブルから行をDELETEした時に失われる情報はないか？」を考える
      </li>
      <li>
        3. 主キーに仕事をさせる<br>
          -> テーブルのデータは主キーによって特定される
      </li>
    </ul>
  </p>

  <br>
  <h4 class="title">ダブらせない（外部キー以外）</h4>
  <p>
    <Image src={seikika_03} alt='seikika_03' />
    <ul style="list-style-type: circle;">
      <li>
        データと情報は別、意味のあるものと無いもの
      </li>
      <li>
        「データ」と「情報」の違い<br>
        データ -> 値そのもの。意味はない<br>
        情報 -> 意味がある。<br>
      </li>
      <li>
        同じ単価でも割引等で商品の単価が変わる場合は明細番号1の2420円の商品と商品番号300の2420円の商品は違う「情報」として扱うのか
      </li>
      <li>
        データ（値そのもの）<br>
        　3520
      </li>
      <li>
        情報（分類・整理して意味を持たせたもの）の違い<br>
        　商品番号800番の価格3520<br>
        「価格」じゃなくて「商品の価格」のように見る。<br>
      </li>
    </ul>
  </p>

  <br>
  <p>
    <Image src={seikika_04} alt='seikika_04' />
    <ul style="list-style-type: circle;">
      <li>
        情報が異なればダブりじゃないので1 Factに該当しない。<br>
      </li>
      <li>
        1 Fact, 1 Place<br>
          → ちゃんとやろうとすると難しい。
      </li>
      <li>
        1 fact 1 place.<br>
        １つの情報は、１箇所にのみ存在する情報を保つ。<br>
        うっかり混ぜないよう気をつけないと。
      </li>
      <li>
        1つの情報は、1箇所にのみ存在する状態を保つ。<br>
        1 fact 1 placeは結構難しい。
      </li>
    </ul>

  <br><br>
  <h3 class="title">twitter上のQA</h3>
  <p>
    <ul style="list-style-type: none;">
      <li>
        Ｑ：履歴の話になってしまうのですが、履歴をやろうとすると1 fact  1 place にならないかも？と思ったりもしたのですがどうでしょう？
      </li>
      <li>
        Ａ１：履歴には、必ずシーケンスか日時がキーに含まれているはずで、○○に発生したXXイベント　という形の情報として捉えられると情報のダブりではなくなるかなーと考えています。
      </li>
      <li>
        Ａ２：今回すげーはしょったんですけど、 1 fact 1place. のファクトは「情報」じゃなくて本当は「事実」なんですよ。<br>
        なので履歴系のデータの場合は、シーケンスとかタイムスタンプみたいなものも込みで、「○○に発生したXXという事実 」という捉え方が必要。
      </li>
      <li>
        　⇒確かに。あるECの履歴テーブルでは商品名とか値段も履歴として持っていたので、この「事実」という単語はしっくり来ると思います。
      </li>
      <br>
      <li>
        Ｑ：変更が多い場合はJSONを使うという手もあるのか。
      </li>
      <li>
        Ａ：ロックは行単位になるので、JSONになんでも突っ込んでしまうとロック待機やデッドロックになりやすいです。<br>
        更新が多いなら、できるだけ正規化するのが王道かなーとは思います。
      </li>
    </ul>
  </p>

  <br>
  <h4 class="title">ロストしない</h4>
  <p>
    <Image src={seikika_05} alt='seikika_05' />
  </p>

  <br><br>
  <h4 class="title">主キーに仕事をさせる</h4>
  <p>
    <Image src={seikika_06} alt='seikika_06' />

    <ul style="list-style-type: circle;">
      <li>
        「ちょうどいい設計」は、つまるところ正規化をすること。<br>
        この説明でのポイントは、正規化の手順をおぼえろー、ではなく、どういう観点 (が正規化の意図するところか) に注目するといいのか、というところ。<br>
        うむうむ。
      </li>
      <li>
        正規化よく考えないでいきなりパフォーマンスの心配して<br>
        不整合起こしやすいテーブル設計にするケースがあって辛かったので<br>
        まずこういう正規化の考え方をベースによく考えてDB設計するようにしたい。<br>
      </li>
    </ul>
  </p>

  <br><br>
  <h4 class="title">お勧め本</h4>
  <ul>
    <li>
      <a href="https://amzn.to/46KdSpA" target="_blank" rel="noopener noreferrer">
        達人に学ぶDB設計 徹底指南書<br/>
        <Image src={tatsujin_db} alt='tatsujin_db' width={200} />
      </a>
    </li>
    <li>
      <a href="https://amzn.to/42V8heO" target="_blank" rel="noopener noreferrer">
        楽々ERDレッスン<br/>
        <Image src={erd_lesson} alt='erd_lesson' width={200} />
      </a>
    </li>
    <li>
      <a href="https://amzn.to/42gLhqB" target="_blank" rel="noopener noreferrer">
        SQLアンチパターン<br/>
        <Image src={sql_anti_pattern} alt='sql_anti_pattern' width={200} />
      </a>
    </li>
  </ul>

  <br><br>
  <span id="db_fail_design"></span>
  <h2 class="title">申込におけるDB設計の失敗とたられば</h2>
  <p>
    <a href="https://twitter.com/ngmt83" target="_blank">ﾅｶﾞﾓﾄ</a>さんの発表
  </p>

  <br>
  <h3 class="title">発表資料</h3>
  <p>
    2020/06/05 時点で資料未公開
  </p>

  <br>
  <h3 class="title">発表に対するtwitterの反応</h3>
    <ul style="list-style-type: circle;">
      <li>
        一旦明細テーブルにはfactを全部ぶっこんでおいて、安全に倒しておくと失敗は少ない、わかるなぁ<br>
      </li>
      <li>
        割引のように価格が変わる場合<br>
        ・新しいレコードにする<br>
        ・価格履歴を残す<br>
        など方法は複数あってどれが良いとは言いにくい。<br>
        受注明細に限れば、履歴を残しておけばとりあえず安全。<br>
        （これは安全側に倒す場合であり、なんでこんなのを入れているんだと言われる可能性はある。）<br>
      </li>
      <li>
        申込テーブルに全てまとめる<br>
        　→ ステップの順番が変わったり、合併したがその変更はアプリ側で吸収することができた<br>
      </li>
      <li>
        RDBじゃなければいいのでは？
      </li>
      <li>
        こんなに変更するならJSONにぶちこむ選択肢
      </li>
      <li>
        確定する前で変更が多いならRDBではなくNoSQLを選択しそう。<br>
        あとはワークフローシステムのテーブルを参考にするのもありかなぁ。
      </li>
      <li>
        すげー気になってたけれど、ログ、GA使えばいいよね。ってある <br>
        　※GA：Google Analytics<br>
      </li>
      <li>
        RDBを使わないでGAで離脱したステップを取るか、なるほど… 
      </li>
      <li>
        JSONにする場合は、検索するならインデックスが必要か、使うDBMSでインデックスを張れるか、ってのも気になるところ。RDBMSである必要はないので、どういうドキュメントDBを選べばいい、ってのはあり。
      </li>
      <li>
        離脱箇所をGoogleAnalyticsで確認できるの初めて知った。<br>
        ヒートマップ的なものなのかな
      </li>
      <li>
        入力を途中でやめてしまった人の把握はGoogleAnalyticsでできるのか。<br>
        　⇒カスタムイベントの機能ですね！
      </li>
      <li>
        フォームが複雑なやつ、自分が作るなら全カラムNOT NULLつけるようにテーブル設計して、ページ遷移の間はRedisに突っ込んで、最後の登録ボタンで1トランザクションで複数テーブルにINSERTするかなぁ。 
      </li>
      <li>
        JSONを使う場合は安易にRDBのjsonカラムに入れてはだめですよ！<br>
        そーだい本、「JSONの甘い罠」です。適材適所。
      </li>
    </ul>
  </p>


  <br><br>
  <span id="dislike_null"></span>
  <h2 class="title">NULL嫌いのUPDATEしないDB設計</h2>
  <p>
    <a href="https://twitter.com/sinsoku_listy" target="_blank">神速</a>さんの発表
  </p>

  <br>
  <h3 class="title">発表資料</h3>
    <div style="max-width: 650px">
      <iframe width="650" height="400" src="https://speakerdeck.com/player/8e107b7c165d486b945689a1b53b6e92" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br>
    </div>

  <br>
  <h3 class="title">参考リンク</h3>
  <p>
    大事なので先にこのリンクを貼っておく。<br>
    <a href="http://mickindex.sakura.ne.jp/database/db_getout_null.html" target="_blank">NULL撲滅委員会</a><br>
  </p>

  <br>
  <h3 class="title">発表の内容</h3>

  <h4 class="title">NULLの特性と問題</h4>
  <p>
    <Image src={about_null_05} alt='about_null_05' />
    <ul style="list-style-type: circle;">
      <li>
        演算できないは、あった。わすれて、ハマった。
      </li>
    </ul>
  </p>

  <br>
  <h4 class="title">四則演算</h4>
  <p>
    <Image src={about_null_06} alt='about_null_06' />
    <ul style="list-style-type: circle;">
      <li>
        NULLは伝播する<br>
        NULL [+-*/] 1 -> NULL
      </li>
    </ul>
  </p>

  <br>
  <h4 class="title">比較できない</h4>
  <p>
    <Image src={about_null_07} alt='about_null_07' />
    <ul style="list-style-type: circle;">
      <li>
        IS NULL じゃなくて "==" でチェックするミスあるある
      </li>
    </ul>
  </p>

  <br>
  <h4 class="title">集合関数で無視される</h4>
  <p>
    <Image src={about_null_08} alt='about_null_08' /><br>
  </p>

  <br>
  <h4 class="title">ORDER BYのnullの動きがRDB依存</h4>
  <p>
    <Image src={about_null_09} alt='about_null_09' />
    <br><br>
    <Image src={about_null_10} alt='about_null_10' />

    <ul style="list-style-type: circle;">
      <li>
        NULL入りのカラムでORDER BYしてはいけないな…
      </li>
      <li>
        まじでnull平気でいれようとする方なんなの。
      </li>
      <li>
        ちなみにOracleの場合はデフォルトではNULLは昇順で一番最後。<br>
        NULLを最初に出したい場合は「NULLS FIRST」を使う。<br>
        SELECT * FROM T_NAME ORDER BY DATA_NAME <font color="red">NULLS FIRST</font>;<br>
        <a href="https://nj-clucker.com/order-by-null-on-oracle/" target="_blank">参考</a>
      </li>
  </p>

  <br><br>
  <h4 class="title">3値論理</h4>
  <p>
    <Image src={about_null_11} alt='about_null_11' />

    <ul style="list-style-type: circle;">
      <li>
        ミックさんの130値論理の話を持ってこようと思ったら、発表者さんがその付近のURLを紹介されてた…。<br>
        <a href="http://mickindex.sakura.ne.jp/database/db_130.html" target="_blank">130値論理</a><br>
        <a href="http://mickindex.sakura.ne.jp/database/db_3vl.html" target="_blank">3値論理 ―― 神のいない論理</a>
      </li>
      <li>
        NULL<br>
        ・四則演算できない（全部 NULL になる）<br>
        ・比較できない（これも結果は NULL）<br>
        　　IS NULL などを使う<br>
        ・集合関数で無視される<br>
        　　この挙動を知っていないと危険<br>
        ・ソートで PostgreSQL では最後、MySQL では最初になる<br>
        ・3値論理 → トリッキー<br>
        　　!= TRUE で NULL が漏れる<br>
    </li>
  </p>

  <br><br>
  <h3 class="title">その他twitterの反応</h3>

  <h4 class="title">Rails関連(ActiveRecord)</h4>
  <p>
    <ul style="list-style-type: circle;">
      <li>
        ActiveRecordの一部のメソッド(update_allなど)はバリデーションをスキップする
      </li>
      <li>
        Railsのバリデーションはこちらを参考にしました<br>
        <a href="https://railsguides.jp/active_record_validations.html" target="_blank">Active Record バリデーション</a>
      </li>
      <li>
        ActiveRecord::NotNullViolation
      </li>
      <li>
        default: ""もありますよねぇ〜
      </li>
      <li>
        非常によくみるrailsの設計だ、、
      </li>
      <li>
        dependent: :nullify なら使えるのか。missing
      </li>
      <li>
        ActiveRecord v6.1の新機能<br>
        * where.missing(:author)<br>
        * check_constraint
      </li>
      <li>
        Railsでチェック制約つけられるのかーーー
      </li>
      <li>
        where.missing(:author)<br>
        論理削除に便利
      </li>
      <li>
        Active Recordに関するところは知らない言語/フレームワークの話で、知っている人には良い話なんだろうけど全然わからなかった。残念。
      </li>
      <li>
        CHECK制約つけたいときって Rails だと rein 使うのかな？<br>
        <a href="https://github.com/nullobject/rein" target="_blank">nullobject/rein</a>
      </li>
      <li>
        DHH式ってやつだな！
      </li>
      <li>
        DHH式がよくわかるおすすめ記事はこちら！<br>
        <a href="https://tech.kitchhike.com/entry/2017/03/07/190739" target="_blank">DHH流のルーティングで得られるメリットと、取り入れる上でのポイント</a>
      </li>
      <li>
        良い発表が聞けた。ちょうど困っていたところで、これで自信を持って踏み出せる。
      </li>
    </ul>
  </p>

  <br><br>
  <h4 class="title">Rails以外</h4>
  <p>
    <ul style="list-style-type: circle;">
      <li>
        理解しているNULL、NULLが必要であれば当然必要。なんも考えずに同居させるのはよくないよね
      </li>
      <li>
        RDBとは関係ないけどpandasとかでもNULL入っているとNumberが入ったseriesと加算したときにNaNなったはず。
      </li>
      <li>
        日時のnullはつらい<br>
        MySQLの 0000-00-00 も辛い
      </li>
      <li>
        できるだけNOT NULLつける -> 今夜は心の奥深くに刺さるものが多いなぁ泣
      </li>
      <li>
        MySQLにはCHAR(0)というのがあって、NOT NULL制約を付けないとフラグとして機能するらしい（）<br>
        <a href="https://sakaik.hateblo.jp/entry/20200521/mysql_char_zero?utm_source=feed" target="_blank">MySQL: CHAR(0)の動作が変わっていた</a>
      </li>
      <li>
        信用できるのはDB制約
      </li>
      <li>
        DBでできる整合性はDBで持つべき！そのとおり！ 
      </li>
      <li>
        プログラマ、DBの機能を使わずに全て自分のコードで書きたい傾向があるのは、あるある。<br>
        なんでそうなるのかは、いまいちよくわからない。
      </li>
      <li>
        「DB直で触ったら入っちゃうじゃん」<br>
        ですよねー
      </li>
      <li>
        昔上司にDBの制約はデータを守る最後の砦と言われたなぁ
      </li>
      <li>
        bool型には3っつの意味があるのじゃよ・・・true, false, null...ｳｯ!!! 
      </li>
      <li>
        Generated Column(生成カラム)で特定のカラムにインデックスはれたような＞json
      </li>
      <li>
        FYI : jsonデータでインデックスをはるための生成カラム<br>
        <a href="https://dev.mysql.com/doc/refman/5.7/en/create-table-generated-columns.html" target="_blank">13.1.18.7 CREATE TABLE and Generated Columns</a>
      </li>
      <li>
        MySQL 5.7以降のGenerated Columnを使うとJSONにインデックス貼れるのか。良い <br>
        <a href="https://www.wakuwakubank.com/posts/509-mysql-json-index/" target="_blank">JSON型でインデックスを活用する方法と性能比較</a>
      </li>
      <li>
        ちょっと該当箇所見つけづらいですが、MySQL8なら生成カラム的な書き方じゃなくてもJSONにINDEXできますね。<br>
        <a href="https://dev.mysql.com/doc/refman/8.0/en/create-index.html" target="_blank">13.1.15 CREATE INDEX Statement</a>
      </li>
      <li>
        NOT NULLつけたい気持ち強くあったけど、具体的な設計聞くとイメージ湧いて腹落ちした。
      </li>
      <li>
        (純粋な)関係モデルにはそもそもNULLなんてないしねー。NULLは可能な限り撲滅でいいと思う。<br>
        といいつつ、ところどころ使ってたりもするのでアレ(どれ)です。
      </li>
      <li>
        論削でなく、データを普通に消してuser_archiveとかにjsonで保存しておくのは、なるほどと思った。<br>
        確かに、変更するデータじゃないのでjsonで持っておくのはありかも。
      </li>
      <li>
        3値演算で不具合の原因になりやすいのがNOTによる否定ですよね。<br>
        true, false の2値演算の前提で不具合を作り込みやすいのと、QAでもケース漏れしやすい。<br>
        そもそも論でいうと、Nullは状態だから、テーブルに状態を持つなと言う原理主義もあったり。
      </li>
    </ul>
  </p>

  <br>
  <h4 class="title">イベント全体を通したtwitterの反応</h4>
  <ul style="list-style-type: circle;">
    <li>
      C++で開発してると「NULLで初期化する」というのが頭にあるけど<br>
      DB に NULL は入れない方がよい<br>
      四則演算、比較出来ない、集合演算だっけなも出来ない<br>
      そして正規化は難しい<br>
      いっそ正規化しない方法もある<br>
      事を学んだ夜だった<br>
      ありがとうございました<br>
    </li>
  </ul>
</SiteLayout>
