---
import SiteLayout from '../../../../layouts/SiteLayout.astro';
import { TWITTER_CARD_SUMMARY } from '../../../../components/BaseHead.astro';
import { Image } from 'astro:assets';
import imgBfrScheduler from './img/bfr_scheduler.png';
import imgAftScheduler from './img/aft_scheduler.png';
import { BASE_URL } from '../../../../consts';

const indexList = [
  { id: "#summary", name: "概要" },
  { id: "#mechanism", name: "仕組み" },
  { id: "#whatilearn", name: "学び" }
];
---

<SiteLayout
  title="cron脱却（コンテナ化を見据えて）"
  description="twitterのbotとか自動リリース機能の構築とか、自作サイト作ってそれをhttps化したりとかいろいろ自力で構築した中で得た知識を整理した記事です。"
  twitterCardSize={TWITTER_CARD_SUMMARY}
  indexList={indexList}
>
  <h2 class="title">cron脱却（コンテナ化を見据えて）</h2>

  <br/><br/>
  <p style="color: #FFFFFF;"><a href={BASE_URL} style="color: #00bfff;">ホーム</a> &gt; <a href=`${BASE_URL}/contents/bymyself/bymyself` style="color: #00bfff;">個人開発したことまとめ</a> &gt; cron脱却</p>

  <div id="summary"></div>
  <h3 class="title">cron脱却（コンテナ化を見据えて）</h3>
  <p>
    新しく配属されたプロジェクトで Docker や GitLab で自動リリース機能構築(CD)など、これまで触れたことのない技術が大量にあったので、それらを使うことで少しでも早くその技術に慣れ、使いこなせるようになりたかった。<br/>
    なので今後コンテナ化、GitLab で CD 機能を構築していくが、その前に cron から脱却し、各言語のスケジューラを使用することでコンテナ化したときの移植性を高めたい。<br/>
    稼働時間を変えたいとか、新しく bot を作った時の稼働タイミングの設定を、これまで使用していた cron から各アプリで行うように修正することで、ローカルで設定したものを GitLab に push してしまえば後は勝手にリリースされて時間になったら bot が稼働するという状態を目指したい。<br/>
  </p>

  <br/><br/>
  <div id="mechanism"></div>
  <h3 class="title">どんな仕組み？</h3>
  <h4 class="title">対応前</h4>
  <p>
    <Image src={imgBfrScheduler} width={800} alt="対応前スケジューラ" /><br/><br/>
    1台1つのプログラムは別ファイルになっており、それを cron でキックしていた。<br/>
  </p>

  <br/><br/>
  <h4 class="title">対応後</h4>
  <p>
    親となるプログラムを作り、そこで稼働時間の設定を行い、時間になったら動くような仕掛けを作った。<br/>
    <Image src={imgAftScheduler} width={800} alt="対応後スケジューラ" /><br/>
    <br/>
  </p>

  <br/><br/>
  <h4 class="title">Go のスケジューラと実装</h4>
  <p>
    <a href="https://pkg.go.dev/github.com/bamzi/jobrunner" target="_blank">jobrunner</a> というライブラリを使用した。<br/>
  </p>
  <script src="https://gist.github.com/taumax-github/dfb5cf7a9edfa17844ec891c342e255e.js"></script>

  <br/>
  <h4 class="title">python のスケジューラと実装</h4>
  <p>
    <a href="https://schedule.readthedocs.io/en/stable/" target="_blank">schedule</a> というライブラリを使用した。<br/>
  </p>
  <script src="https://gist.github.com/taumax-github/98db979f9208da2ef655cf5e73c44ff5.js"></script>

  <br/><br/>
  参考
  <ul>
    <li><a href="https://schedule.readthedocs.io/en/stable/" target="_blank">schedule</a></li>
    <li><a href="https://qiita.com/dgkmtu/items/3bd3794b44a0aa03bfe3" target="_blank">【Python】scheduleを使ってモジュールを定期実行させよう</a></li>
    <li><a href="https://di-acc2.com/programming/python/4574/" target="_blank">【Python】Scheduleモジュールを用いたイベント定期実行｜指定時間動作のスケジュール関数作成例と使い方解説</a></li>
    <li><a href="https://miyabikno-jobs.com/python-schedule-library/#:~:text=%E3%80%8Cschedule%E3%80%8D%E3%81%AF%E3%80%81Python%E3%81%A7,%E4%BE%8B%E3%80%8D%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%AC%E6%98%8E%E3%81%97%E3%81%BE%E3%81%99%E3%80%82" target="_blank">【Python】Scheduleライブラリでタスクスケジュールを管理する</a></li>
    <li><a href="https://pkg.go.dev/github.com/bamzi/jobrunner" target="_blank">jobrunner</a></li>
    <li><a href="https://kakakakakku.hatenablog.com/entry/2017/08/13/122359" target="_blank">Golang でジョブのスケジューリング実行ができる JobRunner を試した</a></li>
  </ul>

</SiteLayout>
